/*
 * generated by Xtext 2.10.0
 */
package org.xtext.selenium.selemodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SeleModelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMainMainParserRuleCall_0_0 = (RuleCall)cMainAssignment_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		
		//Model:
		//	main=Main
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//main=Main functions+=Function*
		public Group getGroup() { return cGroup; }
		
		//main=Main
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }
		
		//Main
		public RuleCall getMainMainParserRuleCall_0_0() { return cMainMainParserRuleCall_0_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
	}
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Main:
		//	"main" "{"
		//	expressions+=Expression*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"main" "{" expressions+=Expression* "}"
		public Group getGroup() { return cGroup; }
		
		//"main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamDeclarationParserRuleCall_3_0_0 = (RuleCall)cParamAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParamAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionsExpressionParserRuleCall_6_0 = (RuleCall)cExpressionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Function:
		//	'function' name=ID '(' (param+=Declaration (',' param+=Declaration)*)? ')' '{'
		//	expressions+=Expression*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (param+=Declaration (',' param+=Declaration)*)? ')' '{' expressions+=Expression* '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(param+=Declaration (',' param+=Declaration)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//param+=Declaration
		public Assignment getParamAssignment_3_0() { return cParamAssignment_3_0; }
		
		//Declaration
		public RuleCall getParamDeclarationParserRuleCall_3_0_0() { return cParamDeclarationParserRuleCall_3_0_0; }
		
		//(',' param+=Declaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//param+=Declaration
		public Assignment getParamAssignment_3_1_1() { return cParamAssignment_3_1_1; }
		
		//Declaration
		public RuleCall getParamDeclarationParserRuleCall_3_1_1_0() { return cParamDeclarationParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment_6() { return cExpressionsAssignment_6; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_6_0() { return cExpressionsExpressionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefFunctionCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cRefFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamAttribuableParserRuleCall_2_0_0 = (RuleCall)cParamAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamAttribuableParserRuleCall_2_1_1_0 = (RuleCall)cParamAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	ref=[Function] '(' (param+=Attribuable (',' param+=Attribuable)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Function] '(' (param+=Attribuable (',' param+=Attribuable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//ref=[Function]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Function]
		public CrossReference getRefFunctionCrossReference_0_0() { return cRefFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getRefFunctionIDTerminalRuleCall_0_0_1() { return cRefFunctionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(param+=Attribuable (',' param+=Attribuable)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//param+=Attribuable
		public Assignment getParamAssignment_2_0() { return cParamAssignment_2_0; }
		
		//Attribuable
		public RuleCall getParamAttribuableParserRuleCall_2_0_0() { return cParamAttribuableParserRuleCall_2_0_0; }
		
		//(',' param+=Attribuable)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//param+=Attribuable
		public Assignment getParamAssignment_2_1_1() { return cParamAssignment_2_1_1; }
		
		//Attribuable
		public RuleCall getParamAttribuableParserRuleCall_2_1_1_0() { return cParamAttribuableParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDecAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDecDeclarationParserRuleCall_0_0 = (RuleCall)cDecAssignment_0.eContents().get(0);
		private final Assignment cAttAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAttAttributionParserRuleCall_1_0 = (RuleCall)cAttAssignment_1.eContents().get(0);
		private final Assignment cActAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cActActionParserRuleCall_2_0 = (RuleCall)cActAssignment_2.eContents().get(0);
		private final Assignment cAssAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAssAssertionParserRuleCall_3_0 = (RuleCall)cAssAssignment_3.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expression:
		//	dec=Declaration | att=Attribution | act=Action | ass=Assertion | FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//dec=Declaration | att=Attribution | act=Action | ass=Assertion | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dec=Declaration
		public Assignment getDecAssignment_0() { return cDecAssignment_0; }
		
		//Declaration
		public RuleCall getDecDeclarationParserRuleCall_0_0() { return cDecDeclarationParserRuleCall_0_0; }
		
		//att=Attribution
		public Assignment getAttAssignment_1() { return cAttAssignment_1; }
		
		//Attribution
		public RuleCall getAttAttributionParserRuleCall_1_0() { return cAttAttributionParserRuleCall_1_0; }
		
		//act=Action
		public Assignment getActAssignment_2() { return cActAssignment_2; }
		
		//Action
		public RuleCall getActActionParserRuleCall_2_0() { return cActActionParserRuleCall_2_0; }
		
		//ass=Assertion
		public Assignment getAssAssignment_3() { return cAssAssignment_3; }
		
		//Assertion
		public RuleCall getAssAssertionParserRuleCall_3_0() { return cAssAssertionParserRuleCall_3_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4() { return cFunctionCallParserRuleCall_4; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAtt1Assignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAtt1AttribuableParserRuleCall_1_0_0_0 = (RuleCall)cAtt1Assignment_1_0_0.eContents().get(0);
		private final Keyword cEqualKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cAtt2Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cAtt2AttribuableParserRuleCall_1_0_2_0 = (RuleCall)cAtt2Assignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cCon1Assignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cCon1ContainerParserRuleCall_1_1_0_0 = (RuleCall)cCon1Assignment_1_1_0.eContents().get(0);
		private final Keyword cContainKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cCon2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cCon2ContainerParserRuleCall_1_1_2_0 = (RuleCall)cCon2Assignment_1_1_2.eContents().get(0);
		
		//Assertion:
		//	"assert" (att1=Attribuable "equal" att2=Attribuable | con1=Container "contain" con2=Container);
		@Override public ParserRule getRule() { return rule; }
		
		//"assert" (att1=Attribuable "equal" att2=Attribuable | con1=Container "contain" con2=Container)
		public Group getGroup() { return cGroup; }
		
		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//(att1=Attribuable "equal" att2=Attribuable | con1=Container "contain" con2=Container)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//att1=Attribuable "equal" att2=Attribuable
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//att1=Attribuable
		public Assignment getAtt1Assignment_1_0_0() { return cAtt1Assignment_1_0_0; }
		
		//Attribuable
		public RuleCall getAtt1AttribuableParserRuleCall_1_0_0_0() { return cAtt1AttribuableParserRuleCall_1_0_0_0; }
		
		//"equal"
		public Keyword getEqualKeyword_1_0_1() { return cEqualKeyword_1_0_1; }
		
		//att2=Attribuable
		public Assignment getAtt2Assignment_1_0_2() { return cAtt2Assignment_1_0_2; }
		
		//Attribuable
		public RuleCall getAtt2AttribuableParserRuleCall_1_0_2_0() { return cAtt2AttribuableParserRuleCall_1_0_2_0; }
		
		//con1=Container "contain" con2=Container
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//con1=Container
		public Assignment getCon1Assignment_1_1_0() { return cCon1Assignment_1_1_0; }
		
		//Container
		public RuleCall getCon1ContainerParserRuleCall_1_1_0_0() { return cCon1ContainerParserRuleCall_1_1_0_0; }
		
		//"contain"
		public Keyword getContainKeyword_1_1_1() { return cContainKeyword_1_1_1; }
		
		//con2=Container
		public Assignment getCon2Assignment_1_1_2() { return cCon2Assignment_1_1_2; }
		
		//Container
		public RuleCall getCon2ContainerParserRuleCall_1_1_2_0() { return cCon2ContainerParserRuleCall_1_1_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Declaration:
		//	'var' var+=Var;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' var+=Var
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//var+=Var
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//Var
		public RuleCall getVarVarParserRuleCall_1_0() { return cVarVarParserRuleCall_1_0; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AttribuableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Attribuable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_0 = (RuleCall)cStrAssignment_0.eContents().get(0);
		private final Assignment cAttrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAttrAttributParserRuleCall_1_0 = (RuleCall)cAttrAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cRefVarCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefVarIDTerminalRuleCall_2_0_1 = (RuleCall)cRefVarCrossReference_2_0.eContents().get(1);
		
		//Attribuable:
		//	str=STRING | attr=Attribut | ref=[Var];
		@Override public ParserRule getRule() { return rule; }
		
		//str=STRING | attr=Attribut | ref=[Var]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//str=STRING
		public Assignment getStrAssignment_0() { return cStrAssignment_0; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_0() { return cStrSTRINGTerminalRuleCall_0_0; }
		
		//attr=Attribut
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }
		
		//Attribut
		public RuleCall getAttrAttributParserRuleCall_1_0() { return cAttrAttributParserRuleCall_1_0; }
		
		//ref=[Var]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//[Var]
		public CrossReference getRefVarCrossReference_2_0() { return cRefVarCrossReference_2_0; }
		
		//ID
		public RuleCall getRefVarIDTerminalRuleCall_2_0_1() { return cRefVarIDTerminalRuleCall_2_0_1; }
	}
	public class AttributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Attribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarVarCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVarIDTerminalRuleCall_0_0_1 = (RuleCall)cVarVarCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttbAttribuableParserRuleCall_2_0 = (RuleCall)cAttbAssignment_2.eContents().get(0);
		
		//Attribution:
		//	var=[Var] "=" attb=Attribuable;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Var] "=" attb=Attribuable
		public Group getGroup() { return cGroup; }
		
		//var=[Var]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[Var]
		public CrossReference getVarVarCrossReference_0_0() { return cVarVarCrossReference_0_0; }
		
		//ID
		public RuleCall getVarVarIDTerminalRuleCall_0_0_1() { return cVarVarIDTerminalRuleCall_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//attb=Attribuable
		public Assignment getAttbAssignment_2() { return cAttbAssignment_2; }
		
		//Attribuable
		public RuleCall getAttbAttribuableParserRuleCall_2_0() { return cAttbAttribuableParserRuleCall_2_0; }
	}
	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Attribut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cContainerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cContainerContainerParserRuleCall_0_0_0 = (RuleCall)cContainerAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cChampAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cChampChampParserRuleCall_0_2_0_0 = (RuleCall)cChampAssignment_0_2_0.eContents().get(0);
		private final Assignment cLenAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cLenLengthParserRuleCall_0_2_1_0 = (RuleCall)cLenAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cContainersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cContainersContainersParserRuleCall_1_0_0 = (RuleCall)cContainersAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLenLengthParserRuleCall_1_2_0 = (RuleCall)cLenAssignment_1_2.eContents().get(0);
		
		//Attribut:
		//	container=Container "." (champ=Champ | len=Length) | containers=Containers "." len=Length;
		@Override public ParserRule getRule() { return rule; }
		
		//container=Container "." (champ=Champ | len=Length) | containers=Containers "." len=Length
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//container=Container "." (champ=Champ | len=Length)
		public Group getGroup_0() { return cGroup_0; }
		
		//container=Container
		public Assignment getContainerAssignment_0_0() { return cContainerAssignment_0_0; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_0_0_0() { return cContainerContainerParserRuleCall_0_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//(champ=Champ | len=Length)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//champ=Champ
		public Assignment getChampAssignment_0_2_0() { return cChampAssignment_0_2_0; }
		
		//Champ
		public RuleCall getChampChampParserRuleCall_0_2_0_0() { return cChampChampParserRuleCall_0_2_0_0; }
		
		//len=Length
		public Assignment getLenAssignment_0_2_1() { return cLenAssignment_0_2_1; }
		
		//Length
		public RuleCall getLenLengthParserRuleCall_0_2_1_0() { return cLenLengthParserRuleCall_0_2_1_0; }
		
		//containers=Containers "." len=Length
		public Group getGroup_1() { return cGroup_1; }
		
		//containers=Containers
		public Assignment getContainersAssignment_1_0() { return cContainersAssignment_1_0; }
		
		//Containers
		public RuleCall getContainersContainersParserRuleCall_1_0_0() { return cContainersContainersParserRuleCall_1_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//len=Length
		public Assignment getLenAssignment_1_2() { return cLenAssignment_1_2; }
		
		//Length
		public RuleCall getLenLengthParserRuleCall_1_2_0() { return cLenLengthParserRuleCall_1_2_0; }
	}
	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Length");
		private final Keyword cLengthKeyword = (Keyword)rule.eContents().get(1);
		
		//Length:
		//	"length";
		@Override public ParserRule getRule() { return rule; }
		
		//"length"
		public Keyword getLengthKeyword() { return cLengthKeyword; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenBrowserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFillParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClickParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNavigateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChooseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCheckParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUncheckParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Action:
		//	OpenBrowser | Fill | Click | Navigate | Choose | Check | Uncheck;
		@Override public ParserRule getRule() { return rule; }
		
		//OpenBrowser | Fill | Click | Navigate | Choose | Check | Uncheck
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpenBrowser
		public RuleCall getOpenBrowserParserRuleCall_0() { return cOpenBrowserParserRuleCall_0; }
		
		//Fill
		public RuleCall getFillParserRuleCall_1() { return cFillParserRuleCall_1; }
		
		//Click
		public RuleCall getClickParserRuleCall_2() { return cClickParserRuleCall_2; }
		
		//Navigate
		public RuleCall getNavigateParserRuleCall_3() { return cNavigateParserRuleCall_3; }
		
		//Choose
		public RuleCall getChooseParserRuleCall_4() { return cChooseParserRuleCall_4; }
		
		//Check
		public RuleCall getCheckParserRuleCall_5() { return cCheckParserRuleCall_5; }
		
		//Uncheck
		public RuleCall getUncheckParserRuleCall_6() { return cUncheckParserRuleCall_6; }
	}
	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerContainerParserRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		private final Assignment cAttbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttbAttribuableParserRuleCall_2_0 = (RuleCall)cAttbAssignment_2.eContents().get(0);
		
		//Fill:
		//	"fill" container=Container attb=Attribuable;
		@Override public ParserRule getRule() { return rule; }
		
		//"fill" container=Container attb=Attribuable
		public Group getGroup() { return cGroup; }
		
		//"fill"
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }
		
		//container=Container
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_1_0() { return cContainerContainerParserRuleCall_1_0; }
		
		//attb=Attribuable
		public Assignment getAttbAssignment_2() { return cAttbAssignment_2; }
		
		//Attribuable
		public RuleCall getAttbAttribuableParserRuleCall_2_0() { return cAttbAttribuableParserRuleCall_2_0; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerContainerParserRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		
		//Click:
		//	"click" container=Container;
		@Override public ParserRule getRule() { return rule; }
		
		//"click" container=Container
		public Group getGroup() { return cGroup; }
		
		//"click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//container=Container
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_1_0() { return cContainerContainerParserRuleCall_1_0; }
	}
	public class NavigateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Navigate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttbAttribuableParserRuleCall_1_0 = (RuleCall)cAttbAssignment_1.eContents().get(0);
		
		//Navigate:
		//	"navigate" attb=Attribuable;
		@Override public ParserRule getRule() { return rule; }
		
		//"navigate" attb=Attribuable
		public Group getGroup() { return cGroup; }
		
		//"navigate"
		public Keyword getNavigateKeyword_0() { return cNavigateKeyword_0; }
		
		//attb=Attribuable
		public Assignment getAttbAssignment_1() { return cAttbAssignment_1; }
		
		//Attribuable
		public RuleCall getAttbAttribuableParserRuleCall_1_0() { return cAttbAttribuableParserRuleCall_1_0; }
	}
	public class ChooseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Choose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChooseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerContainerParserRuleCall_1_0 = (RuleCall)cContainerAssignment_1.eContents().get(0);
		private final Assignment cAttbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttbAttribuableParserRuleCall_2_0 = (RuleCall)cAttbAssignment_2.eContents().get(0);
		
		//Choose:
		//	"choose" container=Container attb=Attribuable;
		@Override public ParserRule getRule() { return rule; }
		
		//"choose" container=Container attb=Attribuable
		public Group getGroup() { return cGroup; }
		
		//"choose"
		public Keyword getChooseKeyword_0() { return cChooseKeyword_0; }
		
		//container=Container
		public Assignment getContainerAssignment_1() { return cContainerAssignment_1; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_1_0() { return cContainerContainerParserRuleCall_1_0; }
		
		//attb=Attribuable
		public Assignment getAttbAssignment_2() { return cAttbAssignment_2; }
		
		//Attribuable
		public RuleCall getAttbAttribuableParserRuleCall_2_0() { return cAttbAttribuableParserRuleCall_2_0; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cContainerAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cContainerContainerParserRuleCall_1_0_0 = (RuleCall)cContainerAssignment_1_0.eContents().get(0);
		private final Assignment cContainersAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContainersContainersParserRuleCall_1_1_0 = (RuleCall)cContainersAssignment_1_1.eContents().get(0);
		
		//Check:
		//	"check" (container=Container | containers=Containers);
		@Override public ParserRule getRule() { return rule; }
		
		//"check" (container=Container | containers=Containers)
		public Group getGroup() { return cGroup; }
		
		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//(container=Container | containers=Containers)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//container=Container
		public Assignment getContainerAssignment_1_0() { return cContainerAssignment_1_0; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_1_0_0() { return cContainerContainerParserRuleCall_1_0_0; }
		
		//containers=Containers
		public Assignment getContainersAssignment_1_1() { return cContainersAssignment_1_1; }
		
		//Containers
		public RuleCall getContainersContainersParserRuleCall_1_1_0() { return cContainersContainersParserRuleCall_1_1_0; }
	}
	public class UncheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Uncheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUncheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cContainerAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cContainerContainerParserRuleCall_1_0_0 = (RuleCall)cContainerAssignment_1_0.eContents().get(0);
		private final Assignment cContainersAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContainersContainersParserRuleCall_1_1_0 = (RuleCall)cContainersAssignment_1_1.eContents().get(0);
		
		//Uncheck:
		//	"uncheck" (container=Container | containers=Containers);
		@Override public ParserRule getRule() { return rule; }
		
		//"uncheck" (container=Container | containers=Containers)
		public Group getGroup() { return cGroup; }
		
		//"uncheck"
		public Keyword getUncheckKeyword_0() { return cUncheckKeyword_0; }
		
		//(container=Container | containers=Containers)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//container=Container
		public Assignment getContainerAssignment_1_0() { return cContainerAssignment_1_0; }
		
		//Container
		public RuleCall getContainerContainerParserRuleCall_1_0_0() { return cContainerContainerParserRuleCall_1_0_0; }
		
		//containers=Containers
		public Assignment getContainersAssignment_1_1() { return cContainersAssignment_1_1; }
		
		//Containers
		public RuleCall getContainersContainersParserRuleCall_1_1_0() { return cContainersContainersParserRuleCall_1_1_0; }
	}
	public class OpenBrowserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.OpenBrowser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenbrowserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserBrowsersParserRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		
		//OpenBrowser:
		//	"openbrowser" browser=Browsers;
		@Override public ParserRule getRule() { return rule; }
		
		//"openbrowser" browser=Browsers
		public Group getGroup() { return cGroup; }
		
		//"openbrowser"
		public Keyword getOpenbrowserKeyword_0() { return cOpenbrowserKeyword_0; }
		
		//browser=Browsers
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }
		
		//Browsers
		public RuleCall getBrowserBrowsersParserRuleCall_1_0() { return cBrowserBrowsersParserRuleCall_1_0; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeContainerTypeContainerParserRuleCall_1_0 = (RuleCall)cTypeContainerAssignment_1.eContents().get(0);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cHierarchyAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cHierarchyParentContainerParserRuleCall_4_0_0 = (RuleCall)cHierarchyAssignment_4_0.eContents().get(0);
		private final Assignment cHierarchyAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cHierarchyChildContainerParserRuleCall_4_1_0 = (RuleCall)cHierarchyAssignment_4_1.eContents().get(0);
		
		//Container:
		//	'[' typeContainer=TypeContainer conditions+=Condition* ']' (hierarchy+=ParentContainer | hierarchy+=ChildContainer)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' typeContainer=TypeContainer conditions+=Condition* ']' (hierarchy+=ParentContainer | hierarchy+=ChildContainer)*
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//typeContainer=TypeContainer
		public Assignment getTypeContainerAssignment_1() { return cTypeContainerAssignment_1; }
		
		//TypeContainer
		public RuleCall getTypeContainerTypeContainerParserRuleCall_1_0() { return cTypeContainerTypeContainerParserRuleCall_1_0; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_0() { return cConditionsConditionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//(hierarchy+=ParentContainer | hierarchy+=ChildContainer)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//hierarchy+=ParentContainer
		public Assignment getHierarchyAssignment_4_0() { return cHierarchyAssignment_4_0; }
		
		//ParentContainer
		public RuleCall getHierarchyParentContainerParserRuleCall_4_0_0() { return cHierarchyParentContainerParserRuleCall_4_0_0; }
		
		//hierarchy+=ChildContainer
		public Assignment getHierarchyAssignment_4_1() { return cHierarchyAssignment_4_1; }
		
		//ChildContainer
		public RuleCall getHierarchyChildContainerParserRuleCall_4_1_0() { return cHierarchyChildContainerParserRuleCall_4_1_0; }
	}
	public class ContainersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Containers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeContainerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeContainerTypeContainerParserRuleCall_1_0 = (RuleCall)cTypeContainerAssignment_1.eContents().get(0);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Containers:
		//	'[[' typeContainer=TypeContainer conditions+=Condition* ']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' typeContainer=TypeContainer conditions+=Condition* ']]'
		public Group getGroup() { return cGroup; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//typeContainer=TypeContainer
		public Assignment getTypeContainerAssignment_1() { return cTypeContainerAssignment_1; }
		
		//TypeContainer
		public RuleCall getTypeContainerTypeContainerParserRuleCall_1_0() { return cTypeContainerTypeContainerParserRuleCall_1_0; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_0() { return cConditionsConditionParserRuleCall_2_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChampAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChampChampParserRuleCall_0_0 = (RuleCall)cChampAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStrAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cStrAssignment_2_0.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cRefVarCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefVarIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefVarCrossReference_2_1_0.eContents().get(1);
		
		//Condition:
		//	champ=Champ "=" (str=STRING | ref=[Var]);
		@Override public ParserRule getRule() { return rule; }
		
		//champ=Champ "=" (str=STRING | ref=[Var])
		public Group getGroup() { return cGroup; }
		
		//champ=Champ
		public Assignment getChampAssignment_0() { return cChampAssignment_0; }
		
		//Champ
		public RuleCall getChampChampParserRuleCall_0_0() { return cChampChampParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(str=STRING | ref=[Var])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//str=STRING
		public Assignment getStrAssignment_2_0() { return cStrAssignment_2_0; }
		
		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_2_0_0() { return cStrSTRINGTerminalRuleCall_2_0_0; }
		
		//ref=[Var]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }
		
		//[Var]
		public CrossReference getRefVarCrossReference_2_1_0() { return cRefVarCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefVarIDTerminalRuleCall_2_1_0_1() { return cRefVarIDTerminalRuleCall_2_1_0_1; }
	}
	public class ParentContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.ParentContainer");
		private final Keyword cParentKeyword = (Keyword)rule.eContents().get(1);
		
		//ParentContainer:
		//	".parent";
		@Override public ParserRule getRule() { return rule; }
		
		//".parent"
		public Keyword getParentKeyword() { return cParentKeyword; }
	}
	public class ChildContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.ChildContainer");
		private final Keyword cChildKeyword = (Keyword)rule.eContents().get(1);
		
		//ChildContainer:
		//	".child";
		@Override public ParserRule getRule() { return rule; }
		
		//".child"
		public Keyword getChildKeyword() { return cChildKeyword; }
	}
	public class BrowsersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Browsers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFirefoxKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cChromeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Browsers:
		//	"firefox" | "default" | "chrome";
		@Override public ParserRule getRule() { return rule; }
		
		//"firefox" | "default" | "chrome"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"firefox"
		public Keyword getFirefoxKeyword_0() { return cFirefoxKeyword_0; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
		
		//"chrome"
		public Keyword getChromeKeyword_2() { return cChromeKeyword_2; }
	}
	public class ChampElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.Champ");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInnerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cValueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHrefKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTitleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTypeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAltKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Champ:
		//	"id" | "class" | "inner" | "value" | "href" | "title" | "type" | "alt";
		@Override public ParserRule getRule() { return rule; }
		
		//"id" | "class" | "inner" | "value" | "href" | "title" | "type" | "alt"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"id"
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//"inner"
		public Keyword getInnerKeyword_2() { return cInnerKeyword_2; }
		
		//"value"
		public Keyword getValueKeyword_3() { return cValueKeyword_3; }
		
		//"href"
		public Keyword getHrefKeyword_4() { return cHrefKeyword_4; }
		
		//"title"
		public Keyword getTitleKeyword_5() { return cTitleKeyword_5; }
		
		//"type"
		public Keyword getTypeKeyword_6() { return cTypeKeyword_6; }
		
		//"alt"
		public Keyword getAltKeyword_7() { return cAltKeyword_7; }
	}
	public class TypeContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.selemodel.SeleModel.TypeContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cElmKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInputKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDivKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSelectKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLinkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cImgKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//TypeContainer:
		//	"Elm" | "Body" | "Input" | "Div" | "Select" | "Link" | "Img";
		@Override public ParserRule getRule() { return rule; }
		
		//"Elm" | "Body" | "Input" | "Div" | "Select" | "Link" | "Img"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Elm"
		public Keyword getElmKeyword_0() { return cElmKeyword_0; }
		
		//"Body"
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }
		
		//"Input"
		public Keyword getInputKeyword_2() { return cInputKeyword_2; }
		
		//"Div"
		public Keyword getDivKeyword_3() { return cDivKeyword_3; }
		
		//"Select"
		public Keyword getSelectKeyword_4() { return cSelectKeyword_4; }
		
		//"Link"
		public Keyword getLinkKeyword_5() { return cLinkKeyword_5; }
		
		//"Img"
		public Keyword getImgKeyword_6() { return cImgKeyword_6; }
	}
	
	
	private final ModelElements pModel;
	private final MainElements pMain;
	private final FunctionElements pFunction;
	private final FunctionCallElements pFunctionCall;
	private final ExpressionElements pExpression;
	private final AssertionElements pAssertion;
	private final DeclarationElements pDeclaration;
	private final VarElements pVar;
	private final AttribuableElements pAttribuable;
	private final AttributionElements pAttribution;
	private final AttributElements pAttribut;
	private final LengthElements pLength;
	private final ActionElements pAction;
	private final FillElements pFill;
	private final ClickElements pClick;
	private final NavigateElements pNavigate;
	private final ChooseElements pChoose;
	private final CheckElements pCheck;
	private final UncheckElements pUncheck;
	private final OpenBrowserElements pOpenBrowser;
	private final ContainerElements pContainer;
	private final ContainersElements pContainers;
	private final ConditionElements pCondition;
	private final ParentContainerElements pParentContainer;
	private final ChildContainerElements pChildContainer;
	private final BrowsersElements pBrowsers;
	private final ChampElements pChamp;
	private final TypeContainerElements pTypeContainer;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SeleModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMain = new MainElements();
		this.pFunction = new FunctionElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pExpression = new ExpressionElements();
		this.pAssertion = new AssertionElements();
		this.pDeclaration = new DeclarationElements();
		this.pVar = new VarElements();
		this.pAttribuable = new AttribuableElements();
		this.pAttribution = new AttributionElements();
		this.pAttribut = new AttributElements();
		this.pLength = new LengthElements();
		this.pAction = new ActionElements();
		this.pFill = new FillElements();
		this.pClick = new ClickElements();
		this.pNavigate = new NavigateElements();
		this.pChoose = new ChooseElements();
		this.pCheck = new CheckElements();
		this.pUncheck = new UncheckElements();
		this.pOpenBrowser = new OpenBrowserElements();
		this.pContainer = new ContainerElements();
		this.pContainers = new ContainersElements();
		this.pCondition = new ConditionElements();
		this.pParentContainer = new ParentContainerElements();
		this.pChildContainer = new ChildContainerElements();
		this.pBrowsers = new BrowsersElements();
		this.pChamp = new ChampElements();
		this.pTypeContainer = new TypeContainerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.selenium.selemodel.SeleModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	main=Main
	//	functions+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Main:
	//	"main" "{"
	//	expressions+=Expression*
	//	"}";
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Function:
	//	'function' name=ID '(' (param+=Declaration (',' param+=Declaration)*)? ')' '{'
	//	expressions+=Expression*
	//	'}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//FunctionCall:
	//	ref=[Function] '(' (param+=Attribuable (',' param+=Attribuable)*)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//Expression:
	//	dec=Declaration | att=Attribution | act=Action | ass=Assertion | FunctionCall;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Assertion:
	//	"assert" (att1=Attribuable "equal" att2=Attribuable | con1=Container "contain" con2=Container);
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//Declaration:
	//	'var' var+=Var;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Var:
	//	name=ID;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Attribuable:
	//	str=STRING | attr=Attribut | ref=[Var];
	public AttribuableElements getAttribuableAccess() {
		return pAttribuable;
	}
	
	public ParserRule getAttribuableRule() {
		return getAttribuableAccess().getRule();
	}
	
	//Attribution:
	//	var=[Var] "=" attb=Attribuable;
	public AttributionElements getAttributionAccess() {
		return pAttribution;
	}
	
	public ParserRule getAttributionRule() {
		return getAttributionAccess().getRule();
	}
	
	//Attribut:
	//	container=Container "." (champ=Champ | len=Length) | containers=Containers "." len=Length;
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}
	
	//Length:
	//	"length";
	public LengthElements getLengthAccess() {
		return pLength;
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}
	
	//Action:
	//	OpenBrowser | Fill | Click | Navigate | Choose | Check | Uncheck;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Fill:
	//	"fill" container=Container attb=Attribuable;
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}
	
	//Click:
	//	"click" container=Container;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Navigate:
	//	"navigate" attb=Attribuable;
	public NavigateElements getNavigateAccess() {
		return pNavigate;
	}
	
	public ParserRule getNavigateRule() {
		return getNavigateAccess().getRule();
	}
	
	//Choose:
	//	"choose" container=Container attb=Attribuable;
	public ChooseElements getChooseAccess() {
		return pChoose;
	}
	
	public ParserRule getChooseRule() {
		return getChooseAccess().getRule();
	}
	
	//Check:
	//	"check" (container=Container | containers=Containers);
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//Uncheck:
	//	"uncheck" (container=Container | containers=Containers);
	public UncheckElements getUncheckAccess() {
		return pUncheck;
	}
	
	public ParserRule getUncheckRule() {
		return getUncheckAccess().getRule();
	}
	
	//OpenBrowser:
	//	"openbrowser" browser=Browsers;
	public OpenBrowserElements getOpenBrowserAccess() {
		return pOpenBrowser;
	}
	
	public ParserRule getOpenBrowserRule() {
		return getOpenBrowserAccess().getRule();
	}
	
	//Container:
	//	'[' typeContainer=TypeContainer conditions+=Condition* ']' (hierarchy+=ParentContainer | hierarchy+=ChildContainer)*;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//Containers:
	//	'[[' typeContainer=TypeContainer conditions+=Condition* ']]';
	public ContainersElements getContainersAccess() {
		return pContainers;
	}
	
	public ParserRule getContainersRule() {
		return getContainersAccess().getRule();
	}
	
	//Condition:
	//	champ=Champ "=" (str=STRING | ref=[Var]);
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ParentContainer:
	//	".parent";
	public ParentContainerElements getParentContainerAccess() {
		return pParentContainer;
	}
	
	public ParserRule getParentContainerRule() {
		return getParentContainerAccess().getRule();
	}
	
	//ChildContainer:
	//	".child";
	public ChildContainerElements getChildContainerAccess() {
		return pChildContainer;
	}
	
	public ParserRule getChildContainerRule() {
		return getChildContainerAccess().getRule();
	}
	
	//Browsers:
	//	"firefox" | "default" | "chrome";
	public BrowsersElements getBrowsersAccess() {
		return pBrowsers;
	}
	
	public ParserRule getBrowsersRule() {
		return getBrowsersAccess().getRule();
	}
	
	//Champ:
	//	"id" | "class" | "inner" | "value" | "href" | "title" | "type" | "alt";
	public ChampElements getChampAccess() {
		return pChamp;
	}
	
	public ParserRule getChampRule() {
		return getChampAccess().getRule();
	}
	
	//TypeContainer:
	//	"Elm" | "Body" | "Input" | "Div" | "Select" | "Link" | "Img";
	public TypeContainerElements getTypeContainerAccess() {
		return pTypeContainer;
	}
	
	public ParserRule getTypeContainerRule() {
		return getTypeContainerAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
