/**
 * generated by Xtext 2.10.0
 */
package org.xtext.selenium.selemodel.seleModel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.selenium.selemodel.seleModel.Assertion;
import org.xtext.selenium.selemodel.seleModel.Attribuable;
import org.xtext.selenium.selemodel.seleModel.SeleModelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assertion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.selenium.selemodel.seleModel.impl.AssertionImpl#getAtt1 <em>Att1</em>}</li>
 *   <li>{@link org.xtext.selenium.selemodel.seleModel.impl.AssertionImpl#getAtt2 <em>Att2</em>}</li>
 *   <li>{@link org.xtext.selenium.selemodel.seleModel.impl.AssertionImpl#getCon1 <em>Con1</em>}</li>
 *   <li>{@link org.xtext.selenium.selemodel.seleModel.impl.AssertionImpl#getCon2 <em>Con2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssertionImpl extends MinimalEObjectImpl.Container implements Assertion
{
  /**
   * The cached value of the '{@link #getAtt1() <em>Att1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtt1()
   * @generated
   * @ordered
   */
  protected Attribuable att1;

  /**
   * The cached value of the '{@link #getAtt2() <em>Att2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtt2()
   * @generated
   * @ordered
   */
  protected Attribuable att2;

  /**
   * The cached value of the '{@link #getCon1() <em>Con1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCon1()
   * @generated
   * @ordered
   */
  protected org.xtext.selenium.selemodel.seleModel.Container con1;

  /**
   * The cached value of the '{@link #getCon2() <em>Con2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCon2()
   * @generated
   * @ordered
   */
  protected org.xtext.selenium.selemodel.seleModel.Container con2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssertionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SeleModelPackage.Literals.ASSERTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribuable getAtt1()
  {
    return att1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAtt1(Attribuable newAtt1, NotificationChain msgs)
  {
    Attribuable oldAtt1 = att1;
    att1 = newAtt1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__ATT1, oldAtt1, newAtt1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtt1(Attribuable newAtt1)
  {
    if (newAtt1 != att1)
    {
      NotificationChain msgs = null;
      if (att1 != null)
        msgs = ((InternalEObject)att1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__ATT1, null, msgs);
      if (newAtt1 != null)
        msgs = ((InternalEObject)newAtt1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__ATT1, null, msgs);
      msgs = basicSetAtt1(newAtt1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__ATT1, newAtt1, newAtt1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribuable getAtt2()
  {
    return att2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAtt2(Attribuable newAtt2, NotificationChain msgs)
  {
    Attribuable oldAtt2 = att2;
    att2 = newAtt2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__ATT2, oldAtt2, newAtt2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtt2(Attribuable newAtt2)
  {
    if (newAtt2 != att2)
    {
      NotificationChain msgs = null;
      if (att2 != null)
        msgs = ((InternalEObject)att2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__ATT2, null, msgs);
      if (newAtt2 != null)
        msgs = ((InternalEObject)newAtt2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__ATT2, null, msgs);
      msgs = basicSetAtt2(newAtt2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__ATT2, newAtt2, newAtt2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.selenium.selemodel.seleModel.Container getCon1()
  {
    return con1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCon1(org.xtext.selenium.selemodel.seleModel.Container newCon1, NotificationChain msgs)
  {
    org.xtext.selenium.selemodel.seleModel.Container oldCon1 = con1;
    con1 = newCon1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__CON1, oldCon1, newCon1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCon1(org.xtext.selenium.selemodel.seleModel.Container newCon1)
  {
    if (newCon1 != con1)
    {
      NotificationChain msgs = null;
      if (con1 != null)
        msgs = ((InternalEObject)con1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__CON1, null, msgs);
      if (newCon1 != null)
        msgs = ((InternalEObject)newCon1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__CON1, null, msgs);
      msgs = basicSetCon1(newCon1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__CON1, newCon1, newCon1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.selenium.selemodel.seleModel.Container getCon2()
  {
    return con2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCon2(org.xtext.selenium.selemodel.seleModel.Container newCon2, NotificationChain msgs)
  {
    org.xtext.selenium.selemodel.seleModel.Container oldCon2 = con2;
    con2 = newCon2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__CON2, oldCon2, newCon2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCon2(org.xtext.selenium.selemodel.seleModel.Container newCon2)
  {
    if (newCon2 != con2)
    {
      NotificationChain msgs = null;
      if (con2 != null)
        msgs = ((InternalEObject)con2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__CON2, null, msgs);
      if (newCon2 != null)
        msgs = ((InternalEObject)newCon2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SeleModelPackage.ASSERTION__CON2, null, msgs);
      msgs = basicSetCon2(newCon2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SeleModelPackage.ASSERTION__CON2, newCon2, newCon2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SeleModelPackage.ASSERTION__ATT1:
        return basicSetAtt1(null, msgs);
      case SeleModelPackage.ASSERTION__ATT2:
        return basicSetAtt2(null, msgs);
      case SeleModelPackage.ASSERTION__CON1:
        return basicSetCon1(null, msgs);
      case SeleModelPackage.ASSERTION__CON2:
        return basicSetCon2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SeleModelPackage.ASSERTION__ATT1:
        return getAtt1();
      case SeleModelPackage.ASSERTION__ATT2:
        return getAtt2();
      case SeleModelPackage.ASSERTION__CON1:
        return getCon1();
      case SeleModelPackage.ASSERTION__CON2:
        return getCon2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SeleModelPackage.ASSERTION__ATT1:
        setAtt1((Attribuable)newValue);
        return;
      case SeleModelPackage.ASSERTION__ATT2:
        setAtt2((Attribuable)newValue);
        return;
      case SeleModelPackage.ASSERTION__CON1:
        setCon1((org.xtext.selenium.selemodel.seleModel.Container)newValue);
        return;
      case SeleModelPackage.ASSERTION__CON2:
        setCon2((org.xtext.selenium.selemodel.seleModel.Container)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SeleModelPackage.ASSERTION__ATT1:
        setAtt1((Attribuable)null);
        return;
      case SeleModelPackage.ASSERTION__ATT2:
        setAtt2((Attribuable)null);
        return;
      case SeleModelPackage.ASSERTION__CON1:
        setCon1((org.xtext.selenium.selemodel.seleModel.Container)null);
        return;
      case SeleModelPackage.ASSERTION__CON2:
        setCon2((org.xtext.selenium.selemodel.seleModel.Container)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SeleModelPackage.ASSERTION__ATT1:
        return att1 != null;
      case SeleModelPackage.ASSERTION__ATT2:
        return att2 != null;
      case SeleModelPackage.ASSERTION__CON1:
        return con1 != null;
      case SeleModelPackage.ASSERTION__CON2:
        return con2 != null;
    }
    return super.eIsSet(featureID);
  }

} //AssertionImpl
