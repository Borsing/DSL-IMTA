/*
 * generated by Xtext 2.10.0
 */
grammar InternalSeleModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.selenium.selemodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.selenium.selemodel.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.selenium.selemodel.services.SeleModelGrammarAccess;

}

@parser::members {

 	private SeleModelGrammarAccess grammarAccess;

    public InternalSeleModelParser(TokenStream input, SeleModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SeleModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getMainMainParserRuleCall_0_0());
				}
				lv_main_0_0=ruleMain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"main",
						lv_main_0_0,
						"org.xtext.selenium.selemodel.SeleModel.Main");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_1_0());
				}
				lv_functions_1_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"functions",
						lv_functions_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='main'
		{
			newLeafNode(otherlv_0, grammarAccess.getMainAccess().getMainKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMainAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainAccess().getExpressionsExpressionParserRuleCall_2_0());
				}
				lv_expressions_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getMainAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getParamDeclarationParserRuleCall_3_0_0());
					}
					lv_param_3_0=ruleDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"param",
							lv_param_3_0,
							"org.xtext.selenium.selemodel.SeleModel.Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getParamDeclarationParserRuleCall_3_1_1_0());
						}
						lv_param_5_0=ruleDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"param",
								lv_param_5_0,
								"org.xtext.selenium.selemodel.SeleModel.Declaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getExpressionsExpressionParserRuleCall_6_0());
				}
				lv_expressions_8_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_8_0,
						"org.xtext.selenium.selemodel.SeleModel.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getRefFunctionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getParamAttribuableParserRuleCall_2_0_0());
					}
					lv_param_2_0=ruleAttribuable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"param",
							lv_param_2_0,
							"org.xtext.selenium.selemodel.SeleModel.Attribuable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getParamAttribuableParserRuleCall_2_1_1_0());
						}
						lv_param_4_0=ruleAttribuable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"param",
								lv_param_4_0,
								"org.xtext.selenium.selemodel.SeleModel.Attribuable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getDecDeclarationParserRuleCall_0_0());
				}
				lv_dec_0_0=ruleDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"dec",
						lv_dec_0_0,
						"org.xtext.selenium.selemodel.SeleModel.Declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getAttAttributionParserRuleCall_1_0());
				}
				lv_att_1_0=ruleAttribution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"att",
						lv_att_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Attribution");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getActActionParserRuleCall_2_0());
				}
				lv_act_2_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"act",
						lv_act_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getAssAssertionParserRuleCall_3_0());
				}
				lv_ass_3_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"ass",
						lv_ass_3_0,
						"org.xtext.selenium.selemodel.SeleModel.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionCallParserRuleCall_4());
		}
		this_FunctionCall_4=ruleFunctionCall
		{
			$current = $this_FunctionCall_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertionAccess().getAssertKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getAtt1AttribuableParserRuleCall_1_0_0_0());
						}
						lv_att1_1_0=ruleAttribuable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionRule());
							}
							set(
								$current,
								"att1",
								lv_att1_1_0,
								"org.xtext.selenium.selemodel.SeleModel.Attribuable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2='equal'
				{
					newLeafNode(otherlv_2, grammarAccess.getAssertionAccess().getEqualKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getAtt2AttribuableParserRuleCall_1_0_2_0());
						}
						lv_att2_3_0=ruleAttribuable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionRule());
							}
							set(
								$current,
								"att2",
								lv_att2_3_0,
								"org.xtext.selenium.selemodel.SeleModel.Attribuable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getCon1ContainerParserRuleCall_1_1_0_0());
						}
						lv_con1_4_0=ruleContainer
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionRule());
							}
							set(
								$current,
								"con1",
								lv_con1_4_0,
								"org.xtext.selenium.selemodel.SeleModel.Container");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5='contain'
				{
					newLeafNode(otherlv_5, grammarAccess.getAssertionAccess().getContainKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getCon2ContainerParserRuleCall_1_1_2_0());
						}
						lv_con2_6_0=ruleContainer
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionRule());
							}
							set(
								$current,
								"con2",
								lv_con2_6_0,
								"org.xtext.selenium.selemodel.SeleModel.Container");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getVarVarParserRuleCall_1_0());
				}
				lv_var_1_0=ruleVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					add(
						$current,
						"var",
						lv_var_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Var");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleAttribuable
entryRuleAttribuable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttribuableRule()); }
	iv_ruleAttribuable=ruleAttribuable
	{ $current=$iv_ruleAttribuable.current; }
	EOF;

// Rule Attribuable
ruleAttribuable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_str_0_0=RULE_STRING
				{
					newLeafNode(lv_str_0_0, grammarAccess.getAttribuableAccess().getStrSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttribuableRule());
					}
					setWithLastConsumed(
						$current,
						"str",
						lv_str_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAttribuableAccess().getAttrAttributParserRuleCall_1_0());
				}
				lv_attr_1_0=ruleAttribut
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttribuableRule());
					}
					set(
						$current,
						"attr",
						lv_attr_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Attribut");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttribuableRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAttribuableAccess().getRefVarCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAttribution
entryRuleAttribution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributionRule()); }
	iv_ruleAttribution=ruleAttribution
	{ $current=$iv_ruleAttribution.current; }
	EOF;

// Rule Attribution
ruleAttribution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAttributionAccess().getVarVarCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributionAccess().getAttbAttribuableParserRuleCall_2_0());
				}
				lv_attb_2_0=ruleAttribuable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributionRule());
					}
					set(
						$current,
						"attb",
						lv_attb_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Attribuable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttribut
entryRuleAttribut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributRule()); }
	iv_ruleAttribut=ruleAttribut
	{ $current=$iv_ruleAttribut.current; }
	EOF;

// Rule Attribut
ruleAttribut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributAccess().getContainerContainerParserRuleCall_0_0_0());
					}
					lv_container_0_0=ruleContainer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributRule());
						}
						set(
							$current,
							"container",
							lv_container_0_0,
							"org.xtext.selenium.selemodel.SeleModel.Container");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getAttributAccess().getFullStopKeyword_0_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributAccess().getChampChampParserRuleCall_0_2_0_0());
						}
						lv_champ_2_0=ruleChamp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributRule());
							}
							set(
								$current,
								"champ",
								lv_champ_2_0,
								"org.xtext.selenium.selemodel.SeleModel.Champ");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributAccess().getLenLengthParserRuleCall_0_2_1_0());
						}
						lv_len_3_0=ruleLength
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributRule());
							}
							set(
								$current,
								"len",
								lv_len_3_0,
								"org.xtext.selenium.selemodel.SeleModel.Length");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributAccess().getContainersContainersParserRuleCall_1_0_0());
					}
					lv_containers_4_0=ruleContainers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributRule());
						}
						set(
							$current,
							"containers",
							lv_containers_4_0,
							"org.xtext.selenium.selemodel.SeleModel.Containers");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='.'
			{
				newLeafNode(otherlv_5, grammarAccess.getAttributAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributAccess().getLenLengthParserRuleCall_1_2_0());
					}
					lv_len_6_0=ruleLength
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributRule());
						}
						set(
							$current,
							"len",
							lv_len_6_0,
							"org.xtext.selenium.selemodel.SeleModel.Length");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLength
entryRuleLength returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLengthRule()); }
	iv_ruleLength=ruleLength
	{ $current=$iv_ruleLength.current.getText(); }
	EOF;

// Rule Length
ruleLength returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='length'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLengthAccess().getLengthKeyword());
	}
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionAccess().getOpenBrowserParserRuleCall_0());
		}
		this_OpenBrowser_0=ruleOpenBrowser
		{
			$current = $this_OpenBrowser_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getFillParserRuleCall_1());
		}
		this_Fill_1=ruleFill
		{
			$current = $this_Fill_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getClickParserRuleCall_2());
		}
		this_Click_2=ruleClick
		{
			$current = $this_Click_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getNavigateParserRuleCall_3());
		}
		this_Navigate_3=ruleNavigate
		{
			$current = $this_Navigate_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getChooseParserRuleCall_4());
		}
		this_Choose_4=ruleChoose
		{
			$current = $this_Choose_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getCheckParserRuleCall_5());
		}
		this_Check_5=ruleCheck
		{
			$current = $this_Check_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getUncheckParserRuleCall_6());
		}
		this_Uncheck_6=ruleUncheck
		{
			$current = $this_Uncheck_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFill
entryRuleFill returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFillRule()); }
	iv_ruleFill=ruleFill
	{ $current=$iv_ruleFill.current; }
	EOF;

// Rule Fill
ruleFill returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fill'
		{
			newLeafNode(otherlv_0, grammarAccess.getFillAccess().getFillKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFillAccess().getContainerContainerParserRuleCall_1_0());
				}
				lv_container_1_0=ruleContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFillRule());
					}
					set(
						$current,
						"container",
						lv_container_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Container");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFillAccess().getAttbAttribuableParserRuleCall_2_0());
				}
				lv_attb_2_0=ruleAttribuable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFillRule());
					}
					set(
						$current,
						"attb",
						lv_attb_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Attribuable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	iv_ruleClick=ruleClick
	{ $current=$iv_ruleClick.current; }
	EOF;

// Rule Click
ruleClick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='click'
		{
			newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClickAccess().getContainerContainerParserRuleCall_1_0());
				}
				lv_container_1_0=ruleContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClickRule());
					}
					set(
						$current,
						"container",
						lv_container_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Container");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNavigate
entryRuleNavigate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigateRule()); }
	iv_ruleNavigate=ruleNavigate
	{ $current=$iv_ruleNavigate.current; }
	EOF;

// Rule Navigate
ruleNavigate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='navigate'
		{
			newLeafNode(otherlv_0, grammarAccess.getNavigateAccess().getNavigateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNavigateAccess().getAttbAttribuableParserRuleCall_1_0());
				}
				lv_attb_1_0=ruleAttribuable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNavigateRule());
					}
					set(
						$current,
						"attb",
						lv_attb_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Attribuable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChoose
entryRuleChoose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChooseRule()); }
	iv_ruleChoose=ruleChoose
	{ $current=$iv_ruleChoose.current; }
	EOF;

// Rule Choose
ruleChoose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='choose'
		{
			newLeafNode(otherlv_0, grammarAccess.getChooseAccess().getChooseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChooseAccess().getContainerContainerParserRuleCall_1_0());
				}
				lv_container_1_0=ruleContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChooseRule());
					}
					set(
						$current,
						"container",
						lv_container_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Container");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChooseAccess().getAttbAttribuableParserRuleCall_2_0());
				}
				lv_attb_2_0=ruleAttribuable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChooseRule());
					}
					set(
						$current,
						"attb",
						lv_attb_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Attribuable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	iv_ruleCheck=ruleCheck
	{ $current=$iv_ruleCheck.current; }
	EOF;

// Rule Check
ruleCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='check'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCheckAccess().getContainerContainerParserRuleCall_1_0_0());
					}
					lv_container_1_0=ruleContainer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCheckRule());
						}
						set(
							$current,
							"container",
							lv_container_1_0,
							"org.xtext.selenium.selemodel.SeleModel.Container");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCheckAccess().getContainersContainersParserRuleCall_1_1_0());
					}
					lv_containers_2_0=ruleContainers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCheckRule());
						}
						set(
							$current,
							"containers",
							lv_containers_2_0,
							"org.xtext.selenium.selemodel.SeleModel.Containers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleUncheck
entryRuleUncheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUncheckRule()); }
	iv_ruleUncheck=ruleUncheck
	{ $current=$iv_ruleUncheck.current; }
	EOF;

// Rule Uncheck
ruleUncheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uncheck'
		{
			newLeafNode(otherlv_0, grammarAccess.getUncheckAccess().getUncheckKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUncheckAccess().getContainerContainerParserRuleCall_1_0_0());
					}
					lv_container_1_0=ruleContainer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUncheckRule());
						}
						set(
							$current,
							"container",
							lv_container_1_0,
							"org.xtext.selenium.selemodel.SeleModel.Container");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getUncheckAccess().getContainersContainersParserRuleCall_1_1_0());
					}
					lv_containers_2_0=ruleContainers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUncheckRule());
						}
						set(
							$current,
							"containers",
							lv_containers_2_0,
							"org.xtext.selenium.selemodel.SeleModel.Containers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOpenBrowser
entryRuleOpenBrowser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenBrowserRule()); }
	iv_ruleOpenBrowser=ruleOpenBrowser
	{ $current=$iv_ruleOpenBrowser.current; }
	EOF;

// Rule OpenBrowser
ruleOpenBrowser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='openbrowser'
		{
			newLeafNode(otherlv_0, grammarAccess.getOpenBrowserAccess().getOpenbrowserKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOpenBrowserAccess().getBrowserBrowsersParserRuleCall_1_0());
				}
				lv_browser_1_0=ruleBrowsers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpenBrowserRule());
					}
					set(
						$current,
						"browser",
						lv_browser_1_0,
						"org.xtext.selenium.selemodel.SeleModel.Browsers");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current; }
	EOF;

// Rule Container
ruleContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getTypeContainerTypeContainerParserRuleCall_1_0());
				}
				lv_typeContainer_1_0=ruleTypeContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					set(
						$current,
						"typeContainer",
						lv_typeContainer_1_0,
						"org.xtext.selenium.selemodel.SeleModel.TypeContainer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getConditionsConditionParserRuleCall_2_0());
				}
				lv_conditions_2_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainerAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContainerAccess().getHierarchyParentContainerParserRuleCall_4_0_0());
					}
					lv_hierarchy_4_0=ruleParentContainer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerRule());
						}
						add(
							$current,
							"hierarchy",
							lv_hierarchy_4_0,
							"org.xtext.selenium.selemodel.SeleModel.ParentContainer");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getContainerAccess().getHierarchyChildContainerParserRuleCall_4_1_0());
					}
					lv_hierarchy_5_0=ruleChildContainer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContainerRule());
						}
						add(
							$current,
							"hierarchy",
							lv_hierarchy_5_0,
							"org.xtext.selenium.selemodel.SeleModel.ChildContainer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleContainers
entryRuleContainers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainersRule()); }
	iv_ruleContainers=ruleContainers
	{ $current=$iv_ruleContainers.current; }
	EOF;

// Rule Containers
ruleContainers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[['
		{
			newLeafNode(otherlv_0, grammarAccess.getContainersAccess().getLeftSquareBracketLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainersAccess().getTypeContainerTypeContainerParserRuleCall_1_0());
				}
				lv_typeContainer_1_0=ruleTypeContainer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainersRule());
					}
					set(
						$current,
						"typeContainer",
						lv_typeContainer_1_0,
						"org.xtext.selenium.selemodel.SeleModel.TypeContainer");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContainersAccess().getConditionsConditionParserRuleCall_2_0());
				}
				lv_conditions_2_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainersRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_2_0,
						"org.xtext.selenium.selemodel.SeleModel.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']]'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainersAccess().getRightSquareBracketRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getChampChampParserRuleCall_0_0());
				}
				lv_champ_0_0=ruleChamp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"champ",
						lv_champ_0_0,
						"org.xtext.selenium.selemodel.SeleModel.Champ");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				(
					lv_str_2_0=RULE_STRING
					{
						newLeafNode(lv_str_2_0, grammarAccess.getConditionAccess().getStrSTRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getConditionAccess().getRefVarCrossReference_2_1_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParentContainer
entryRuleParentContainer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParentContainerRule()); }
	iv_ruleParentContainer=ruleParentContainer
	{ $current=$iv_ruleParentContainer.current.getText(); }
	EOF;

// Rule ParentContainer
ruleParentContainer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.parent'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getParentContainerAccess().getParentKeyword());
	}
;

// Entry rule entryRuleChildContainer
entryRuleChildContainer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChildContainerRule()); }
	iv_ruleChildContainer=ruleChildContainer
	{ $current=$iv_ruleChildContainer.current.getText(); }
	EOF;

// Rule ChildContainer
ruleChildContainer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.child'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getChildContainerAccess().getChildKeyword());
	}
;

// Entry rule entryRuleBrowsers
entryRuleBrowsers returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBrowsersRule()); }
	iv_ruleBrowsers=ruleBrowsers
	{ $current=$iv_ruleBrowsers.current.getText(); }
	EOF;

// Rule Browsers
ruleBrowsers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='firefox'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBrowsersAccess().getFirefoxKeyword_0());
		}
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBrowsersAccess().getDefaultKeyword_1());
		}
		    |
		kw='chrome'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBrowsersAccess().getChromeKeyword_2());
		}
	)
;

// Entry rule entryRuleChamp
entryRuleChamp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChampRule()); }
	iv_ruleChamp=ruleChamp
	{ $current=$iv_ruleChamp.current.getText(); }
	EOF;

// Rule Champ
ruleChamp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='id'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getIdKeyword_0());
		}
		    |
		kw='class'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getClassKeyword_1());
		}
		    |
		kw='inner'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getInnerKeyword_2());
		}
		    |
		kw='value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getValueKeyword_3());
		}
		    |
		kw='href'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getHrefKeyword_4());
		}
		    |
		kw='title'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getTitleKeyword_5());
		}
		    |
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getTypeKeyword_6());
		}
		    |
		kw='alt'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getChampAccess().getAltKeyword_7());
		}
	)
;

// Entry rule entryRuleTypeContainer
entryRuleTypeContainer returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeContainerRule()); }
	iv_ruleTypeContainer=ruleTypeContainer
	{ $current=$iv_ruleTypeContainer.current.getText(); }
	EOF;

// Rule TypeContainer
ruleTypeContainer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Elm'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getElmKeyword_0());
		}
		    |
		kw='Body'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getBodyKeyword_1());
		}
		    |
		kw='Input'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getInputKeyword_2());
		}
		    |
		kw='Div'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getDivKeyword_3());
		}
		    |
		kw='Select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getSelectKeyword_4());
		}
		    |
		kw='Link'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getLinkKeyword_5());
		}
		    |
		kw='Img'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeContainerAccess().getImgKeyword_6());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
