/**
 * generated by Xtext 2.10.0
 */
package org.xtext.projet.selemodel.selemodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.projet.selemodel.selemodel.Attribuable;
import org.xtext.projet.selemodel.selemodel.Fill;
import org.xtext.projet.selemodel.selemodel.SelemodelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fill</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.FillImpl#getContainer <em>Container</em>}</li>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.FillImpl#getAttb <em>Attb</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FillImpl extends MinimalEObjectImpl.Container implements Fill
{
  /**
   * The cached value of the '{@link #getContainer() <em>Container</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainer()
   * @generated
   * @ordered
   */
  protected org.xtext.projet.selemodel.selemodel.Container container;

  /**
   * The cached value of the '{@link #getAttb() <em>Attb</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttb()
   * @generated
   * @ordered
   */
  protected Attribuable attb;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FillImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SelemodelPackage.Literals.FILL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.projet.selemodel.selemodel.Container getContainer()
  {
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContainer(org.xtext.projet.selemodel.selemodel.Container newContainer, NotificationChain msgs)
  {
    org.xtext.projet.selemodel.selemodel.Container oldContainer = container;
    container = newContainer;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.FILL__CONTAINER, oldContainer, newContainer);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContainer(org.xtext.projet.selemodel.selemodel.Container newContainer)
  {
    if (newContainer != container)
    {
      NotificationChain msgs = null;
      if (container != null)
        msgs = ((InternalEObject)container).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.FILL__CONTAINER, null, msgs);
      if (newContainer != null)
        msgs = ((InternalEObject)newContainer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.FILL__CONTAINER, null, msgs);
      msgs = basicSetContainer(newContainer, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.FILL__CONTAINER, newContainer, newContainer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribuable getAttb()
  {
    return attb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttb(Attribuable newAttb, NotificationChain msgs)
  {
    Attribuable oldAttb = attb;
    attb = newAttb;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.FILL__ATTB, oldAttb, newAttb);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAttb(Attribuable newAttb)
  {
    if (newAttb != attb)
    {
      NotificationChain msgs = null;
      if (attb != null)
        msgs = ((InternalEObject)attb).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.FILL__ATTB, null, msgs);
      if (newAttb != null)
        msgs = ((InternalEObject)newAttb).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.FILL__ATTB, null, msgs);
      msgs = basicSetAttb(newAttb, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.FILL__ATTB, newAttb, newAttb));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SelemodelPackage.FILL__CONTAINER:
        return basicSetContainer(null, msgs);
      case SelemodelPackage.FILL__ATTB:
        return basicSetAttb(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SelemodelPackage.FILL__CONTAINER:
        return getContainer();
      case SelemodelPackage.FILL__ATTB:
        return getAttb();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SelemodelPackage.FILL__CONTAINER:
        setContainer((org.xtext.projet.selemodel.selemodel.Container)newValue);
        return;
      case SelemodelPackage.FILL__ATTB:
        setAttb((Attribuable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SelemodelPackage.FILL__CONTAINER:
        setContainer((org.xtext.projet.selemodel.selemodel.Container)null);
        return;
      case SelemodelPackage.FILL__ATTB:
        setAttb((Attribuable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SelemodelPackage.FILL__CONTAINER:
        return container != null;
      case SelemodelPackage.FILL__ATTB:
        return attb != null;
    }
    return super.eIsSet(featureID);
  }

} //FillImpl
