/**
 * generated by Xtext 2.10.0
 */
package org.xtext.projet.selemodel.selemodel.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.projet.selemodel.selemodel.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SelemodelFactoryImpl extends EFactoryImpl implements SelemodelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SelemodelFactory init()
  {
    try
    {
      SelemodelFactory theSelemodelFactory = (SelemodelFactory)EPackage.Registry.INSTANCE.getEFactory(SelemodelPackage.eNS_URI);
      if (theSelemodelFactory != null)
      {
        return theSelemodelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SelemodelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelemodelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SelemodelPackage.MODEL: return createModel();
      case SelemodelPackage.TEST: return createTest();
      case SelemodelPackage.FUNCTION: return createFunction();
      case SelemodelPackage.FUNCTION_CALL: return createFunctionCall();
      case SelemodelPackage.EXPRESSION: return createExpression();
      case SelemodelPackage.ASSERTION: return createAssertion();
      case SelemodelPackage.DECLARATION: return createDeclaration();
      case SelemodelPackage.DECLARATION_ATTRIBUTION: return createDeclarationAttribution();
      case SelemodelPackage.VAR: return createVar();
      case SelemodelPackage.ATTRIBUABLE: return createAttribuable();
      case SelemodelPackage.ATTRIBUTION: return createAttribution();
      case SelemodelPackage.ATTRIBUT: return createAttribut();
      case SelemodelPackage.ACTION: return createAction();
      case SelemodelPackage.FILL: return createFill();
      case SelemodelPackage.CLICK: return createClick();
      case SelemodelPackage.NAVIGATE: return createNavigate();
      case SelemodelPackage.CHOOSE: return createChoose();
      case SelemodelPackage.CHECK: return createCheck();
      case SelemodelPackage.UNCHECK: return createUncheck();
      case SelemodelPackage.OPEN_BROWSER: return createOpenBrowser();
      case SelemodelPackage.CONTAINER: return createContainer();
      case SelemodelPackage.CONTAINERS: return createContainers();
      case SelemodelPackage.CONDITION: return createCondition();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Test createTest()
  {
    TestImpl test = new TestImpl();
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assertion createAssertion()
  {
    AssertionImpl assertion = new AssertionImpl();
    return assertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationAttribution createDeclarationAttribution()
  {
    DeclarationAttributionImpl declarationAttribution = new DeclarationAttributionImpl();
    return declarationAttribution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribuable createAttribuable()
  {
    AttribuableImpl attribuable = new AttribuableImpl();
    return attribuable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribution createAttribution()
  {
    AttributionImpl attribution = new AttributionImpl();
    return attribution;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribut createAttribut()
  {
    AttributImpl attribut = new AttributImpl();
    return attribut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fill createFill()
  {
    FillImpl fill = new FillImpl();
    return fill;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Click createClick()
  {
    ClickImpl click = new ClickImpl();
    return click;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Navigate createNavigate()
  {
    NavigateImpl navigate = new NavigateImpl();
    return navigate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Choose createChoose()
  {
    ChooseImpl choose = new ChooseImpl();
    return choose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Check createCheck()
  {
    CheckImpl check = new CheckImpl();
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Uncheck createUncheck()
  {
    UncheckImpl uncheck = new UncheckImpl();
    return uncheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OpenBrowser createOpenBrowser()
  {
    OpenBrowserImpl openBrowser = new OpenBrowserImpl();
    return openBrowser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.projet.selemodel.selemodel.Container createContainer()
  {
    ContainerImpl container = new ContainerImpl();
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Containers createContainers()
  {
    ContainersImpl containers = new ContainersImpl();
    return containers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelemodelPackage getSelemodelPackage()
  {
    return (SelemodelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SelemodelPackage getPackage()
  {
    return SelemodelPackage.eINSTANCE;
  }

} //SelemodelFactoryImpl
