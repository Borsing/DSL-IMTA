/**
 * generated by Xtext 2.10.0
 */
package org.xtext.projet.selemodel.selemodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.projet.selemodel.selemodel.Action;
import org.xtext.projet.selemodel.selemodel.Assertion;
import org.xtext.projet.selemodel.selemodel.Attribution;
import org.xtext.projet.selemodel.selemodel.Declaration;
import org.xtext.projet.selemodel.selemodel.DeclarationAttribution;
import org.xtext.projet.selemodel.selemodel.Expression;
import org.xtext.projet.selemodel.selemodel.FunctionCall;
import org.xtext.projet.selemodel.selemodel.SelemodelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.ExpressionImpl#getDec <em>Dec</em>}</li>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.ExpressionImpl#getAtt <em>Att</em>}</li>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.ExpressionImpl#getAct <em>Act</em>}</li>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.ExpressionImpl#getAss <em>Ass</em>}</li>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.ExpressionImpl#getFun <em>Fun</em>}</li>
 *   <li>{@link org.xtext.projet.selemodel.selemodel.impl.ExpressionImpl#getDecatt <em>Decatt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getDec() <em>Dec</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDec()
   * @generated
   * @ordered
   */
  protected Declaration dec;

  /**
   * The cached value of the '{@link #getAtt() <em>Att</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtt()
   * @generated
   * @ordered
   */
  protected Attribution att;

  /**
   * The cached value of the '{@link #getAct() <em>Act</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAct()
   * @generated
   * @ordered
   */
  protected Action act;

  /**
   * The cached value of the '{@link #getAss() <em>Ass</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAss()
   * @generated
   * @ordered
   */
  protected Assertion ass;

  /**
   * The cached value of the '{@link #getFun() <em>Fun</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFun()
   * @generated
   * @ordered
   */
  protected FunctionCall fun;

  /**
   * The cached value of the '{@link #getDecatt() <em>Decatt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecatt()
   * @generated
   * @ordered
   */
  protected DeclarationAttribution decatt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SelemodelPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration getDec()
  {
    return dec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDec(Declaration newDec, NotificationChain msgs)
  {
    Declaration oldDec = dec;
    dec = newDec;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__DEC, oldDec, newDec);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDec(Declaration newDec)
  {
    if (newDec != dec)
    {
      NotificationChain msgs = null;
      if (dec != null)
        msgs = ((InternalEObject)dec).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__DEC, null, msgs);
      if (newDec != null)
        msgs = ((InternalEObject)newDec).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__DEC, null, msgs);
      msgs = basicSetDec(newDec, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__DEC, newDec, newDec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribution getAtt()
  {
    return att;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAtt(Attribution newAtt, NotificationChain msgs)
  {
    Attribution oldAtt = att;
    att = newAtt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__ATT, oldAtt, newAtt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtt(Attribution newAtt)
  {
    if (newAtt != att)
    {
      NotificationChain msgs = null;
      if (att != null)
        msgs = ((InternalEObject)att).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__ATT, null, msgs);
      if (newAtt != null)
        msgs = ((InternalEObject)newAtt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__ATT, null, msgs);
      msgs = basicSetAtt(newAtt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__ATT, newAtt, newAtt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action getAct()
  {
    return act;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAct(Action newAct, NotificationChain msgs)
  {
    Action oldAct = act;
    act = newAct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__ACT, oldAct, newAct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAct(Action newAct)
  {
    if (newAct != act)
    {
      NotificationChain msgs = null;
      if (act != null)
        msgs = ((InternalEObject)act).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__ACT, null, msgs);
      if (newAct != null)
        msgs = ((InternalEObject)newAct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__ACT, null, msgs);
      msgs = basicSetAct(newAct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__ACT, newAct, newAct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assertion getAss()
  {
    return ass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAss(Assertion newAss, NotificationChain msgs)
  {
    Assertion oldAss = ass;
    ass = newAss;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__ASS, oldAss, newAss);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAss(Assertion newAss)
  {
    if (newAss != ass)
    {
      NotificationChain msgs = null;
      if (ass != null)
        msgs = ((InternalEObject)ass).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__ASS, null, msgs);
      if (newAss != null)
        msgs = ((InternalEObject)newAss).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__ASS, null, msgs);
      msgs = basicSetAss(newAss, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__ASS, newAss, newAss));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCall getFun()
  {
    return fun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFun(FunctionCall newFun, NotificationChain msgs)
  {
    FunctionCall oldFun = fun;
    fun = newFun;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__FUN, oldFun, newFun);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFun(FunctionCall newFun)
  {
    if (newFun != fun)
    {
      NotificationChain msgs = null;
      if (fun != null)
        msgs = ((InternalEObject)fun).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__FUN, null, msgs);
      if (newFun != null)
        msgs = ((InternalEObject)newFun).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__FUN, null, msgs);
      msgs = basicSetFun(newFun, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__FUN, newFun, newFun));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationAttribution getDecatt()
  {
    return decatt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDecatt(DeclarationAttribution newDecatt, NotificationChain msgs)
  {
    DeclarationAttribution oldDecatt = decatt;
    decatt = newDecatt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__DECATT, oldDecatt, newDecatt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDecatt(DeclarationAttribution newDecatt)
  {
    if (newDecatt != decatt)
    {
      NotificationChain msgs = null;
      if (decatt != null)
        msgs = ((InternalEObject)decatt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__DECATT, null, msgs);
      if (newDecatt != null)
        msgs = ((InternalEObject)newDecatt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelemodelPackage.EXPRESSION__DECATT, null, msgs);
      msgs = basicSetDecatt(newDecatt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelemodelPackage.EXPRESSION__DECATT, newDecatt, newDecatt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SelemodelPackage.EXPRESSION__DEC:
        return basicSetDec(null, msgs);
      case SelemodelPackage.EXPRESSION__ATT:
        return basicSetAtt(null, msgs);
      case SelemodelPackage.EXPRESSION__ACT:
        return basicSetAct(null, msgs);
      case SelemodelPackage.EXPRESSION__ASS:
        return basicSetAss(null, msgs);
      case SelemodelPackage.EXPRESSION__FUN:
        return basicSetFun(null, msgs);
      case SelemodelPackage.EXPRESSION__DECATT:
        return basicSetDecatt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SelemodelPackage.EXPRESSION__DEC:
        return getDec();
      case SelemodelPackage.EXPRESSION__ATT:
        return getAtt();
      case SelemodelPackage.EXPRESSION__ACT:
        return getAct();
      case SelemodelPackage.EXPRESSION__ASS:
        return getAss();
      case SelemodelPackage.EXPRESSION__FUN:
        return getFun();
      case SelemodelPackage.EXPRESSION__DECATT:
        return getDecatt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SelemodelPackage.EXPRESSION__DEC:
        setDec((Declaration)newValue);
        return;
      case SelemodelPackage.EXPRESSION__ATT:
        setAtt((Attribution)newValue);
        return;
      case SelemodelPackage.EXPRESSION__ACT:
        setAct((Action)newValue);
        return;
      case SelemodelPackage.EXPRESSION__ASS:
        setAss((Assertion)newValue);
        return;
      case SelemodelPackage.EXPRESSION__FUN:
        setFun((FunctionCall)newValue);
        return;
      case SelemodelPackage.EXPRESSION__DECATT:
        setDecatt((DeclarationAttribution)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SelemodelPackage.EXPRESSION__DEC:
        setDec((Declaration)null);
        return;
      case SelemodelPackage.EXPRESSION__ATT:
        setAtt((Attribution)null);
        return;
      case SelemodelPackage.EXPRESSION__ACT:
        setAct((Action)null);
        return;
      case SelemodelPackage.EXPRESSION__ASS:
        setAss((Assertion)null);
        return;
      case SelemodelPackage.EXPRESSION__FUN:
        setFun((FunctionCall)null);
        return;
      case SelemodelPackage.EXPRESSION__DECATT:
        setDecatt((DeclarationAttribution)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SelemodelPackage.EXPRESSION__DEC:
        return dec != null;
      case SelemodelPackage.EXPRESSION__ATT:
        return att != null;
      case SelemodelPackage.EXPRESSION__ACT:
        return act != null;
      case SelemodelPackage.EXPRESSION__ASS:
        return ass != null;
      case SelemodelPackage.EXPRESSION__FUN:
        return fun != null;
      case SelemodelPackage.EXPRESSION__DECATT:
        return decatt != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
