/**
 * generated by Xtext 2.10.0
 */
package org.xtext.projet.selemodel.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.projet.selemodel.selemodel.Action;
import org.xtext.projet.selemodel.selemodel.Assertion;
import org.xtext.projet.selemodel.selemodel.Attribuable;
import org.xtext.projet.selemodel.selemodel.Attribut;
import org.xtext.projet.selemodel.selemodel.Attribution;
import org.xtext.projet.selemodel.selemodel.Check;
import org.xtext.projet.selemodel.selemodel.Choose;
import org.xtext.projet.selemodel.selemodel.Click;
import org.xtext.projet.selemodel.selemodel.Condition;
import org.xtext.projet.selemodel.selemodel.Container;
import org.xtext.projet.selemodel.selemodel.Containers;
import org.xtext.projet.selemodel.selemodel.Declaration;
import org.xtext.projet.selemodel.selemodel.DeclarationAttribution;
import org.xtext.projet.selemodel.selemodel.Expression;
import org.xtext.projet.selemodel.selemodel.Fill;
import org.xtext.projet.selemodel.selemodel.Function;
import org.xtext.projet.selemodel.selemodel.FunctionCall;
import org.xtext.projet.selemodel.selemodel.Model;
import org.xtext.projet.selemodel.selemodel.Navigate;
import org.xtext.projet.selemodel.selemodel.OpenBrowser;
import org.xtext.projet.selemodel.selemodel.Test;
import org.xtext.projet.selemodel.selemodel.Uncheck;
import org.xtext.projet.selemodel.selemodel.Var;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SelemodelGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.test = 0;
    String _fileName = this.fileName(resource);
    String _plus = ("Test" + _fileName);
    String _plus_1 = (_plus + ".java");
    EList<EObject> _contents = resource.getContents();
    Iterable<Model> _filter = Iterables.<Model>filter(_contents, Model.class);
    Model _head = IterableExtensions.<Model>head(_filter);
    CharSequence _generateModel = this.generateModel(_head, resource);
    fsa.generateFile(_plus_1, _generateModel);
  }
  
  public String fileName(final Resource resource) {
    URI _uRI = resource.getURI();
    String _lastSegment = _uRI.lastSegment();
    URI _uRI_1 = resource.getURI();
    String _lastSegment_1 = _uRI_1.lastSegment();
    int _indexOf = _lastSegment_1.indexOf(".");
    return _lastSegment.substring(0, _indexOf);
  }
  
  private int test = 0;
  
  public int testCounter() {
    return this.test++;
  }
  
  public CharSequence generateModel(final Model model, final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.JavascriptExecutor;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.support.ui.Select;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.junit.Assert;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Test");
    String _fileName = this.fileName(resource);
    _builder.append(_fileName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("WebDriver driver;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("WebElement element;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<WebElement> listWebElement;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Select dropdown;");
    _builder.newLine();
    {
      EList<Test> _test = model.getTest();
      for(final Test t : _test) {
        _builder.append("\t");
        CharSequence _generateTest = this.getGenerateTest(t);
        _builder.append(_generateTest, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Function> _functions = model.getFunctions();
      for(final Function function : _functions) {
        _builder.append("\t");
        CharSequence _generateFunction = this.generateFunction(function);
        _builder.append(_generateFunction, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getGenerateTest(final Test test) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("public void test");
    int _testCounter = this.testCounter();
    _builder.append(_testCounter, "");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if(System.getenv(\"chromedriver\")!= null)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.setProperty(\"webdriver.chrome.driver\", System.getenv(\"chromedriver\"));");
    _builder.newLine();
    {
      EList<Expression> _expressions = test.getExpressions();
      for(final Expression expr : _expressions) {
        _builder.append("\t");
        CharSequence _generateExpression = this.generateExpression(expr);
        _builder.append(_generateExpression, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("driver.quit();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateExpression(final Expression e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Action _act = e.getAct();
      boolean _notEquals = (!Objects.equal(_act, null));
      if (_notEquals) {
        Action _act_1 = e.getAct();
        CharSequence _generateAction = this.generateAction(_act_1);
        _builder.append(_generateAction, "");
        _builder.newLineIfNotEmpty();
      } else {
        Assertion _ass = e.getAss();
        boolean _notEquals_1 = (!Objects.equal(_ass, null));
        if (_notEquals_1) {
          Assertion _ass_1 = e.getAss();
          CharSequence _generateAssertion = this.generateAssertion(_ass_1);
          _builder.append(_generateAssertion, "");
          _builder.newLineIfNotEmpty();
        } else {
          Attribution _att = e.getAtt();
          boolean _notEquals_2 = (!Objects.equal(_att, null));
          if (_notEquals_2) {
            Attribution _att_1 = e.getAtt();
            CharSequence _generateAttribution = this.generateAttribution(_att_1);
            _builder.append(_generateAttribution, "");
            _builder.newLineIfNotEmpty();
          } else {
            Declaration _dec = e.getDec();
            boolean _notEquals_3 = (!Objects.equal(_dec, null));
            if (_notEquals_3) {
              Declaration _dec_1 = e.getDec();
              CharSequence _generateDeclaration = this.generateDeclaration(_dec_1);
              _builder.append(_generateDeclaration, "");
              _builder.newLineIfNotEmpty();
            } else {
              FunctionCall _fun = e.getFun();
              boolean _notEquals_4 = (!Objects.equal(_fun, null));
              if (_notEquals_4) {
                FunctionCall _fun_1 = e.getFun();
                CharSequence _generateFunctionCall = this.generateFunctionCall(_fun_1);
                _builder.append(_generateFunctionCall, "");
                _builder.newLineIfNotEmpty();
              } else {
                DeclarationAttribution _decatt = e.getDecatt();
                boolean _notEquals_5 = (!Objects.equal(_decatt, null));
                if (_notEquals_5) {
                  DeclarationAttribution _decatt_1 = e.getDecatt();
                  CharSequence _generateDecAtt = this.generateDecAtt(_decatt_1);
                  _builder.append(_generateDecAtt, "");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateAction(final Action a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      OpenBrowser _brw = a.getBrw();
      boolean _notEquals = (!Objects.equal(_brw, null));
      if (_notEquals) {
        OpenBrowser _brw_1 = a.getBrw();
        CharSequence _generateBrowser = this.getGenerateBrowser(_brw_1);
        _builder.append(_generateBrowser, "");
        _builder.newLineIfNotEmpty();
      } else {
        Navigate _nav = a.getNav();
        boolean _notEquals_1 = (!Objects.equal(_nav, null));
        if (_notEquals_1) {
          Navigate _nav_1 = a.getNav();
          CharSequence _generateNav = this.generateNav(_nav_1);
          _builder.append(_generateNav, "");
          _builder.newLineIfNotEmpty();
        } else {
          Click _cli = a.getCli();
          boolean _notEquals_2 = (!Objects.equal(_cli, null));
          if (_notEquals_2) {
            Click _cli_1 = a.getCli();
            CharSequence _generateClick = this.generateClick(_cli_1);
            _builder.append(_generateClick, "");
            _builder.newLineIfNotEmpty();
          } else {
            Fill _fil = a.getFil();
            boolean _notEquals_3 = (!Objects.equal(_fil, null));
            if (_notEquals_3) {
              Fill _fil_1 = a.getFil();
              CharSequence _generateFill = this.generateFill(_fil_1);
              _builder.append(_generateFill, "");
              _builder.newLineIfNotEmpty();
            } else {
              Check _che = a.getChe();
              boolean _notEquals_4 = (!Objects.equal(_che, null));
              if (_notEquals_4) {
                Check _che_1 = a.getChe();
                CharSequence _generateCheck = this.generateCheck(_che_1);
                _builder.append(_generateCheck, "");
                _builder.newLineIfNotEmpty();
              } else {
                Uncheck _unc = a.getUnc();
                boolean _notEquals_5 = (!Objects.equal(_unc, null));
                if (_notEquals_5) {
                  Uncheck _unc_1 = a.getUnc();
                  CharSequence _generateUncheck = this.generateUncheck(_unc_1);
                  _builder.append(_generateUncheck, "");
                  _builder.newLineIfNotEmpty();
                } else {
                  Choose _cho = a.getCho();
                  boolean _notEquals_6 = (!Objects.equal(_cho, null));
                  if (_notEquals_6) {
                    Choose _cho_1 = a.getCho();
                    CharSequence _generateChoose = this.generateChoose(_cho_1);
                    _builder.append(_generateChoose, "");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence getGenerateBrowser(final OpenBrowser brw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver = new ");
    {
      if ((Objects.equal(brw.getBrowser(), "chrome") || Objects.equal(brw.getBrowser(), "default"))) {
        _builder.append(" ChromeDriver()");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateNav(final Navigate nav) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(");
    Attribuable _attb = nav.getAttb();
    CharSequence _generateAttribuable = this.generateAttribuable(_attb);
    _builder.append(_generateAttribuable, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateClick(final Click click) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("element = driver.");
    Container _container = click.getContainer();
    CharSequence _generateRequestContainer = this.generateRequestContainer(_container);
    _builder.append(_generateRequestContainer, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].click()\", element);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFill(final Fill fill) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("element = driver.");
    Container _container = fill.getContainer();
    CharSequence _generateRequestContainer = this.generateRequestContainer(_container);
    _builder.append(_generateRequestContainer, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("element.sendKeys(");
    Attribuable _attb = fill.getAttb();
    CharSequence _generateAttribuable = this.generateAttribuable(_attb);
    _builder.append(_generateAttribuable, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateUncheck(final Uncheck uncheck) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Container _container = uncheck.getContainer();
      boolean _notEquals = (!Objects.equal(_container, null));
      if (_notEquals) {
        _builder.append("element = driver.");
        Container _container_1 = uncheck.getContainer();
        CharSequence _generateRequestContainer = this.generateRequestContainer(_container_1);
        _builder.append(_generateRequestContainer, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("if(element.isSelected()){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].click()\", element);");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      } else {
        Containers _containers = uncheck.getContainers();
        boolean _notEquals_1 = (!Objects.equal(_containers, null));
        if (_notEquals_1) {
          _builder.append("listWebElement = driver.");
          Containers _containers_1 = uncheck.getContainers();
          CharSequence _generateRequestContainers = this.generateRequestContainers(_containers_1);
          _builder.append(_generateRequestContainers, "");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("for (WebElement e : listWebElement){");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("if(e.isSelected())");
          _builder.newLine();
          _builder.append("\t  ");
          _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].click()\", e);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateCheck(final Check check) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Container _container = check.getContainer();
      boolean _notEquals = (!Objects.equal(_container, null));
      if (_notEquals) {
        _builder.append("element = driver.");
        Container _container_1 = check.getContainer();
        CharSequence _generateRequestContainer = this.generateRequestContainer(_container_1);
        _builder.append(_generateRequestContainer, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("if(!element.isSelected()){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].click()\", element);");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      } else {
        Containers _containers = check.getContainers();
        boolean _notEquals_1 = (!Objects.equal(_containers, null));
        if (_notEquals_1) {
          _builder.append("listWebElement = driver.");
          Containers _containers_1 = check.getContainers();
          CharSequence _generateRequestContainers = this.generateRequestContainers(_containers_1);
          _builder.append(_generateRequestContainers, "");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("for (WebElement e : listWebElement){");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("if(!e.isSelected())");
          _builder.newLine();
          _builder.append("\t  ");
          _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].click()\", e);");
          _builder.newLine();
          _builder.append("}");
          _builder.newLine();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateChoose(final Choose choose) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("element = driver.");
    Container _container = choose.getContainer();
    CharSequence _generateRequestContainer = this.generateRequestContainer(_container);
    _builder.append(_generateRequestContainer, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("dropdown = new Select(element);");
    _builder.newLine();
    _builder.append("dropdown.selectByVisibleText(");
    Attribuable _attb = choose.getAttb();
    CharSequence _generateAttribuable = this.generateAttribuable(_attb);
    _builder.append(_generateAttribuable, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAssertion(final Assertion a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((!Objects.equal(a.getAtt1(), null)) && (!Objects.equal(a.getAtt2(), null)))) {
        _builder.append("Assert.assertEquals(");
        Attribuable _att1 = a.getAtt1();
        CharSequence _generateAttribuable = this.generateAttribuable(_att1);
        _builder.append(_generateAttribuable, "");
        _builder.append(", ");
        Attribuable _att2 = a.getAtt2();
        CharSequence _generateAttribuable_1 = this.generateAttribuable(_att2);
        _builder.append(_generateAttribuable_1, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      } else {
        if (((!Objects.equal(a.getCon1(), null)) && (!Objects.equal(a.getCon2(), null)))) {
          _builder.append("element = driver.");
          Container _con1 = a.getCon1();
          CharSequence _generateRequestContainer = this.generateRequestContainer(_con1);
          _builder.append(_generateRequestContainer, "");
          _builder.append(".");
          Container _con2 = a.getCon2();
          CharSequence _generateRequestContainer_1 = this.generateRequestContainer(_con2);
          _builder.append(_generateRequestContainer_1, "");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("Assert.assertNotNull(element);");
          _builder.newLine();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateAttribution(final Attribution a) {
    StringConcatenation _builder = new StringConcatenation();
    Var _var = a.getVar();
    String _name = _var.getName();
    _builder.append(_name, "");
    _builder.append(" =  ");
    Attribuable _attb = a.getAttb();
    CharSequence _generateAttribuable = this.generateAttribuable(_attb);
    _builder.append(_generateAttribuable, "");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateDeclaration(final Declaration d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String ");
    Var _var = d.getVar();
    String _name = _var.getName();
    _builder.append(_name, "");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateFunctionCall(final FunctionCall f) {
    StringConcatenation _builder = new StringConcatenation();
    Function _ref = f.getRef();
    String _name = _ref.getName();
    _builder.append(_name, "");
    _builder.append("(");
    {
      EList<Attribuable> _param = f.getParam();
      for(final Attribuable p : _param) {
        {
          EList<Attribuable> _param_1 = f.getParam();
          int _indexOf = _param_1.indexOf(p);
          boolean _greaterEqualsThan = (_indexOf >= 1);
          if (_greaterEqualsThan) {
            _builder.append(",");
          }
        }
        CharSequence _generateAttribuable = this.generateAttribuable(p);
        _builder.append(_generateAttribuable, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateDecAtt(final DeclarationAttribution da) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String ");
    Declaration _dec = da.getDec();
    Var _var = _dec.getVar();
    String _name = _var.getName();
    _builder.append(_name, "");
    _builder.append(" = ");
    Attribuable _attb = da.getAttb();
    CharSequence _generateAttribuable = this.generateAttribuable(_attb);
    _builder.append(_generateAttribuable, "");
    _builder.append(" ;");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateAttribut(final Attribut a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Container _container = a.getContainer();
      boolean _notEquals = (!Objects.equal(_container, null));
      if (_notEquals) {
        Container _container_1 = a.getContainer();
        CharSequence _generateAttributContainer = this.generateAttributContainer(a, _container_1);
        _builder.append(_generateAttributContainer, "");
        _builder.newLineIfNotEmpty();
      } else {
        Containers _containers = a.getContainers();
        boolean _notEquals_1 = (!Objects.equal(_containers, null));
        if (_notEquals_1) {
          Containers _containers_1 = a.getContainers();
          CharSequence _generateAttributContainers = this.generateAttributContainers(a, _containers_1);
          _builder.append(_generateAttributContainers, "");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateAttributContainers(final Attribut attribut, final Containers containers) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((!Objects.equal(attribut.getLen(), null)) && (!Objects.equal(containers, null)))) {
        _builder.append("Integer.toString(driver.");
        CharSequence _generateRequestContainers = this.generateRequestContainers(containers);
        _builder.append(_generateRequestContainers, "");
        _builder.append(".size())");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateAttributContainer(final Attribut attribut, final Container container) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((!Objects.equal(attribut.getLen(), null)) && (!Objects.equal(container, null)))) {
        _builder.append("driver.");
        CharSequence _generateRequestContainer = this.generateRequestContainer(container);
        _builder.append(_generateRequestContainer, "");
        _builder.append(" == null ? \"0\" : \"1\"");
        _builder.newLineIfNotEmpty();
      } else {
        String _champ = attribut.getChamp();
        boolean _notEquals = (!Objects.equal(_champ, null));
        if (_notEquals) {
          {
            String _champ_1 = attribut.getChamp();
            boolean _equals = Objects.equal(_champ_1, "inner");
            if (_equals) {
              _builder.append("driver.");
              CharSequence _generateRequestContainer_1 = this.generateRequestContainer(container);
              _builder.append(_generateRequestContainer_1, "");
              _builder.append(".getText()");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("driver.");
              CharSequence _generateRequestContainer_2 = this.generateRequestContainer(container);
              _builder.append(_generateRequestContainer_2, "");
              _builder.append(".getAttribute(\"");
              String _champ_2 = attribut.getChamp();
              _builder.append(_champ_2, "");
              _builder.append("\")");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateAttribuable(final Attribuable a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _str = a.getStr();
      boolean _notEquals = (!Objects.equal(_str, null));
      if (_notEquals) {
        _builder.append(" \"");
        String _str_1 = a.getStr();
        _builder.append(_str_1, "");
        _builder.append("\" ");
      } else {
        Var _ref = a.getRef();
        boolean _notEquals_1 = (!Objects.equal(_ref, null));
        if (_notEquals_1) {
          _builder.append(" ");
          Var _ref_1 = a.getRef();
          String _name = _ref_1.getName();
          _builder.append(_name, "");
          _builder.append(" ");
        } else {
          Attribut _attr = a.getAttr();
          boolean _notEquals_2 = (!Objects.equal(_attr, null));
          if (_notEquals_2) {
            _builder.append(" ");
            Attribut _attr_1 = a.getAttr();
            CharSequence _generateAttribut = this.generateAttribut(_attr_1);
            _builder.append(_generateAttribut, "");
            _builder.append(" ");
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateRequestContainer(final Container c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _typeContainer = c.getTypeContainer();
      boolean _equals = Objects.equal(_typeContainer, "body");
      if (_equals) {
        _builder.append("findElement(By.tagName(\"body\"))");
        _builder.newLine();
      } else {
        _builder.append("findElement(By.xpath(\"//");
        {
          String _typeContainer_1 = c.getTypeContainer();
          boolean _equals_1 = Objects.equal(_typeContainer_1, "elm");
          if (_equals_1) {
            _builder.append("*");
          } else {
            String _typeContainer_2 = c.getTypeContainer();
            _builder.append(_typeContainer_2, "");
          }
        }
        _builder.append("[");
        {
          EList<Condition> _conditions = c.getConditions();
          for(final Condition co : _conditions) {
            {
              EList<Condition> _conditions_1 = c.getConditions();
              int _indexOf = _conditions_1.indexOf(co);
              boolean _greaterEqualsThan = (_indexOf >= 1);
              if (_greaterEqualsThan) {
                _builder.append(" and ");
              }
            }
            {
              String _champ = co.getChamp();
              boolean _equals_2 = Objects.equal(_champ, "inner");
              if (_equals_2) {
                _builder.append("contains(text(),");
                {
                  String _str = co.getStr();
                  boolean _notEquals = (!Objects.equal(_str, null));
                  if (_notEquals) {
                    _builder.append("\'");
                    String _str_1 = co.getStr();
                    _builder.append(_str_1, "");
                    _builder.append("\'");
                  } else {
                    _builder.append("\'\"+");
                    Var _ref = co.getRef();
                    String _name = _ref.getName();
                    _builder.append(_name, "");
                    _builder.append("+\"\'");
                  }
                }
                _builder.append(")");
              } else {
                _builder.append("@");
                String _champ_1 = co.getChamp();
                _builder.append(_champ_1, "");
                _builder.append("=");
                {
                  String _str_2 = co.getStr();
                  boolean _notEquals_1 = (!Objects.equal(_str_2, null));
                  if (_notEquals_1) {
                    _builder.append("\'");
                    String _str_3 = co.getStr();
                    _builder.append(_str_3, "");
                    _builder.append("\'");
                  } else {
                    _builder.append("\'\"+");
                    Var _ref_1 = co.getRef();
                    String _name_1 = _ref_1.getName();
                    _builder.append(_name_1, "");
                    _builder.append("+\"\'");
                  }
                }
              }
            }
          }
        }
        _builder.append("]\"))");
        {
          EList<String> _hierarchy = c.getHierarchy();
          for(final String hierarchy : _hierarchy) {
            {
              boolean _equals_3 = Objects.equal(hierarchy, ".nodeParent");
              if (_equals_3) {
                _builder.append(".findElement(By.xpath(\"..\"))");
              } else {
                boolean _equals_4 = Objects.equal(hierarchy, ".nodeChild");
                if (_equals_4) {
                  _builder.append(".findElement(By.xpath(\".//*[1]\"))");
                }
              }
            }
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateRequestContainers(final Containers c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("findElements(By.xpath(\"//");
    {
      String _typeContainer = c.getTypeContainer();
      boolean _equals = Objects.equal(_typeContainer, "elm");
      if (_equals) {
        _builder.append("*");
      } else {
        String _typeContainer_1 = c.getTypeContainer();
        _builder.append(_typeContainer_1, "");
      }
    }
    _builder.append("[");
    {
      EList<Condition> _conditions = c.getConditions();
      for(final Condition co : _conditions) {
        {
          EList<Condition> _conditions_1 = c.getConditions();
          int _indexOf = _conditions_1.indexOf(co);
          boolean _greaterEqualsThan = (_indexOf >= 1);
          if (_greaterEqualsThan) {
            _builder.append(" and ");
          }
        }
        {
          String _champ = co.getChamp();
          boolean _equals_1 = Objects.equal(_champ, "inner");
          if (_equals_1) {
            _builder.append("contains(text(),");
            {
              String _str = co.getStr();
              boolean _notEquals = (!Objects.equal(_str, null));
              if (_notEquals) {
                _builder.append("\'");
                String _str_1 = co.getStr();
                _builder.append(_str_1, "");
                _builder.append("\'");
              } else {
                _builder.append("\'\"+");
                Var _ref = co.getRef();
                String _name = _ref.getName();
                _builder.append(_name, "");
                _builder.append("+\"\'");
              }
            }
            _builder.append(")");
          } else {
            _builder.append("@");
            String _champ_1 = co.getChamp();
            _builder.append(_champ_1, "");
            _builder.append("=");
            {
              String _str_2 = co.getStr();
              boolean _notEquals_1 = (!Objects.equal(_str_2, null));
              if (_notEquals_1) {
                _builder.append("\'");
                String _str_3 = co.getStr();
                _builder.append(_str_3, "");
                _builder.append("\'");
              } else {
                _builder.append("\'\"+");
                Var _ref_1 = co.getRef();
                String _name_1 = _ref_1.getName();
                _builder.append(_name_1, "");
                _builder.append("+\"\'");
              }
            }
          }
        }
      }
    }
    _builder.append("]\"))");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateFunction(final Function f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void ");
    String _name = f.getName();
    _builder.append(_name, "");
    _builder.append("(");
    {
      EList<Declaration> _param = f.getParam();
      for(final Declaration p : _param) {
        {
          EList<Declaration> _param_1 = f.getParam();
          int _indexOf = _param_1.indexOf(p);
          boolean _greaterEqualsThan = (_indexOf >= 1);
          if (_greaterEqualsThan) {
            _builder.append(", ");
          }
        }
        _builder.append("String ");
        Var _var = p.getVar();
        String _name_1 = _var.getName();
        _builder.append(_name_1, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      EList<Expression> _expressions = f.getExpressions();
      for(final Expression e : _expressions) {
        CharSequence _generateExpression = this.generateExpression(e);
        _builder.append(_generateExpression, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
