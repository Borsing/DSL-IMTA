/*
 * generated by Xtext 2.10.0
 */
package org.xtext.projet.selemodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.projet.selemodel.selemodel.Action
import org.xtext.projet.selemodel.selemodel.Assertion
import org.xtext.projet.selemodel.selemodel.Attribuable
import org.xtext.projet.selemodel.selemodel.Attribut
import org.xtext.projet.selemodel.selemodel.Attribution
import org.xtext.projet.selemodel.selemodel.Check
import org.xtext.projet.selemodel.selemodel.Choose
import org.xtext.projet.selemodel.selemodel.Click
import org.xtext.projet.selemodel.selemodel.Container
import org.xtext.projet.selemodel.selemodel.Containers
import org.xtext.projet.selemodel.selemodel.Declaration
import org.xtext.projet.selemodel.selemodel.DeclarationAttribution
import org.xtext.projet.selemodel.selemodel.Expression
import org.xtext.projet.selemodel.selemodel.Fill
import org.xtext.projet.selemodel.selemodel.Function
import org.xtext.projet.selemodel.selemodel.FunctionCall
import org.xtext.projet.selemodel.selemodel.Model
import org.xtext.projet.selemodel.selemodel.Navigate
import org.xtext.projet.selemodel.selemodel.OpenBrowser
import org.xtext.projet.selemodel.selemodel.Uncheck
import org.xtext.projet.selemodel.selemodel.Test

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SelemodelGenerator extends AbstractGenerator {


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		test=0;
		fsa.generateFile("Test"+fileName(resource)+".java",resource.contents.filter(Model).head.generateModel(resource))
	}
	
	def String fileName(Resource resource) {
		return resource.URI.lastSegment.substring(0,resource.URI.lastSegment.indexOf("."));
	}
	
	int test=0;
	def int testCounter(){
		return test++;
	}
	def generateModel(Model model,Resource resource)'''
		import org.junit.Test;
		import org.openqa.selenium.By;
		import org.openqa.selenium.JavascriptExecutor;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.chrome.ChromeDriver;
		import org.openqa.selenium.support.ui.Select;
		
		import java.util.List;
		
		import org.junit.Assert;
		
		public class Test«fileName(resource)» {
			WebDriver driver;
			WebElement element;
			List<WebElement> listWebElement;
			Select dropdown;
			«FOR t : model.test»
				«t.generateTest»
			«ENDFOR»
			«FOR function : model.functions»
				«function.generateFunction»
			«ENDFOR»
		}

	'''
	
	
	def getGenerateTest(Test test)'''
		@Test
		public void test«this.testCounter»(){
			if(System.getenv("chromedriver")!= null)
				System.setProperty("webdriver.chrome.driver", System.getenv("chromedriver"));
			«FOR expr : test.expressions»
				«expr.generateExpression»
			«ENDFOR»
			driver.quit();
		}
	'''
	
    def generateExpression(Expression e) '''
        «IF e.act != null»
            «e.act.generateAction»
        «ELSEIF e.ass != null»
            «e.ass.generateAssertion»
        «ELSEIF e.att != null»
            «e.att.generateAttribution»
        «ELSEIF e.dec != null»
            «e.dec.generateDeclaration»
        «ELSEIF e.fun != null»
            «e.fun.generateFunctionCall»
        «ELSEIF e.decatt != null»
            «e.decatt.generateDecAtt»
        «ENDIF»
    '''
    
    //EXPRESSIONS
    
    def generateAction(Action a) '''
        «IF a.brw != null»
            «a.brw.generateBrowser»
        «ELSEIF a.nav != null»
            «a.nav.generateNav»
        «ELSEIF a.cli != null»
            «a.cli.generateClick»
        «ELSEIF a.fil != null»
            «a.fil.generateFill»
        «ELSEIF a.che != null»
            «a.che.generateCheck»
        «ELSEIF a.unc != null»
            «a.unc.generateUncheck»
        «ELSEIF a.cho != null»
            «a.cho.generateChoose»
        «ENDIF»
    '''

	
    //Action
    def getGenerateBrowser(OpenBrowser brw) '''
       driver = new «IF brw.browser == "chrome" || brw.browser == "default"» ChromeDriver()«ENDIF»;
    '''
    
   	def generateNav(Navigate nav)'''
	   driver.get(«nav.attb.generateAttribuable»);
	'''
	def generateClick(Click click)'''
	   element = driver.«click.container.generateRequestContainer»;
	   ((JavascriptExecutor) driver).executeScript("arguments[0].click()", element);
	'''
	
	def generateFill(Fill fill)'''
		element = driver.«fill.container.generateRequestContainer»;
		element.sendKeys(«fill.attb.generateAttribuable»);
	'''
	
	def generateUncheck(Uncheck uncheck)'''
		«IF uncheck.container != null»
			element = driver.«uncheck.container.generateRequestContainer»;
			if(element.isSelected()){
				((JavascriptExecutor) driver).executeScript("arguments[0].click()", element);
			}
		«ELSEIF uncheck.containers != null»
			listWebElement = driver.«uncheck.containers.generateRequestContainers»;
			for (WebElement e : listWebElement){
				if(e.isSelected())
				  ((JavascriptExecutor) driver).executeScript("arguments[0].click()", e);
			}
		«ENDIF»
	'''
		
	def generateCheck(Check check)'''
		«IF check.container != null»
			element = driver.«check.container.generateRequestContainer»;
			if(!element.isSelected()){
				((JavascriptExecutor) driver).executeScript("arguments[0].click()", element);
			}
		«ELSEIF check.containers != null»
			listWebElement = driver.«check.containers.generateRequestContainers»;
			for (WebElement e : listWebElement){
				if(!e.isSelected())
				  ((JavascriptExecutor) driver).executeScript("arguments[0].click()", e);
			}
		«ENDIF»
	'''
	
	def generateChoose(Choose choose)'''
		element = driver.«choose.container.generateRequestContainer»;
		dropdown = new Select(element);
		dropdown.selectByVisibleText(«choose.attb.generateAttribuable»);
				
	'''
    
    // ASSERT
    def generateAssertion(Assertion a) '''
    	«IF a.att1 != null && a.att2 != null»
    		Assert.assertEquals(«a.att1.generateAttribuable», «a.att2.generateAttribuable»);
    	«ELSEIF a.con1 != null && a.con2!=null»
    		element = driver.«a.con1.generateRequestContainer».«a.con2.generateRequestContainer»;
    		Assert.assertNotNull(element);
    	«ENDIF»
    '''
    
    def generateAttribution(Attribution a)'''
        «a.^var.name» =  «a.attb.generateAttribuable» ;
    '''
    
    def generateDeclaration(Declaration d)'''
        String «d.^var.name» ;
    '''
    
    def generateFunctionCall(FunctionCall f)'''
        «f.ref.name»(«FOR p : f.param»«IF f.param.indexOf(p)>=1»,«ENDIF»«p.generateAttribuable»«ENDFOR»);
    '''
    
    def generateDecAtt(DeclarationAttribution da)'''
        String «da.dec.^var.name» = «da.attb.generateAttribuable» ;
    '''
    
    //ATTRIBUABLE - ATTRIBUTION
    
    def generateAttribut(Attribut a)'''
        «IF a.container != null»
            «a.generateAttributContainer(a.container)»
        «ELSEIF a.containers != null»
            «a.generateAttributContainers(a.containers)»
        «ENDIF»
    '''
	
	def generateAttributContainers(Attribut attribut, Containers containers)'''
		«IF attribut.len != null && containers != null»
			 Integer.toString(driver.«containers.generateRequestContainers».size())
		«ENDIF»
	'''
	def generateAttributContainer(Attribut attribut, Container container)'''
		«IF attribut.len != null && container != null»
			driver.«container.generateRequestContainer» == null ? "0" : "1"
		«ELSEIF attribut.champ != null»
			«IF attribut.champ == "inner"»
				driver.«container.generateRequestContainer».getText()
			«ELSE»
				driver.«container.generateRequestContainer».getAttribute("«attribut.champ»")
			«ENDIF»
		«ENDIF»
	'''
		
    def generateAttribuable(Attribuable a)'''
        «IF a.str != null» "«a.str»" «ELSEIF a.ref != null» «a.ref.name» «ELSEIF a.attr != null» «a.attr.generateAttribut» «ENDIF»'''
    
    
    //CONTAINERS
    def generateRequestContainer(Container c)'''
    	«IF c.typeContainer == "body"»
    		findElement(By.tagName("body"))
    	«ELSE»
    		findElement(By.xpath("//«IF c.typeContainer == "elm"»*«ELSE»«c.typeContainer»«ENDIF»[«FOR co : c.conditions»«IF c.conditions.indexOf(co) >= 1» and «ENDIF»«IF co.champ == "inner"»contains(text(),«IF co.str != null»'«co.str»'«ELSE»'"+«co.ref.name»+"'«ENDIF»)«ELSE»@«co.champ»=«IF co.str != null»'«co.str»'«ELSE»'"+«co.ref.name»+"'«ENDIF»«ENDIF»«ENDFOR»]"))«FOR hierarchy : c.hierarchy»«IF hierarchy == ".nodeParent"».findElement(By.xpath(".."))«ELSEIF hierarchy == ".nodeChild"».findElement(By.xpath(".//*[1]"))«ENDIF»«ENDFOR»
		«ENDIF»
    '''
    
    def generateRequestContainers(Containers c)'''
        findElements(By.xpath("//«IF c.typeContainer == "elm"»*«ELSE»«c.typeContainer»«ENDIF»[«FOR co : c.conditions»«IF c.conditions.indexOf(co) >= 1» and «ENDIF»«IF co.champ == "inner"»contains(text(),«IF co.str != null»'«co.str»'«ELSE»'"+«co.ref.name»+"'«ENDIF»)«ELSE»@«co.champ»=«IF co.str != null»'«co.str»'«ELSE»'"+«co.ref.name»+"'«ENDIF»«ENDIF»«ENDFOR»]"))
    '''


    
    //FUNCTION
    
    def generateFunction(Function f)'''
        public void «f.name»(«FOR p : f.param»«IF f.param.indexOf(p) >= 1», «ENDIF»String «p.^var.name»«ENDFOR») {
        «FOR e : f.expressions»
            «e.generateExpression»
        «ENDFOR»
        }
    '''
}

